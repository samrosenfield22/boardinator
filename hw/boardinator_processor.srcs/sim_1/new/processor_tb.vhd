----------------------------------------------------------------------------------
--------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
use IEEE.NUMERIC_STD.ALL;

--use work.simple.all;

entity processor_tb is
--  Port ( );
end processor_tb;

architecture Behavioral of processor_tb is
    component processor
    Port ( temporary_processor_instr_input : in STD_LOGIC_VECTOR(15 downto 0);  --delet
           clk : in STD_LOGIC;
           rst : in STD_LOGIC;
           pc_out : out STD_LOGIC_VECTOR (9 downto 0));
    end component;
    
    signal instr_input : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
    signal clk : std_logic := '0';
    signal rst: std_logic := '1';
    signal pc: std_logic_vector(9 downto 0) := "0000000000";
    
    type prog_mem_t is array (999 downto 0) of std_logic_vector(15 downto 0);
    signal prog_rom: prog_mem_t :=
    (    
    			0 => "0000000001001010",		--	set		r0,0x4A
		1 => "0000000100010001",		--	set		r1,0x11
		2 => "1001111000000001",		--setstk r6,r1
		3 => "0001111000000001",		-- addl r6,1
		4 => "1001111000000000",		--setstk r6,r0
		5 => "0001111000000001",		-- addl r6,1
		6 => "1010110100000000",		--getpcl r5
		7 => "1011010000000000",		-- getpch r4
		8 => "0001110100001011",		--  addl r5,11
		9 => "1001000000001011",		-- jovf inc_upper_mangled_tempfile3.asm_15
		10 => "0110100000001100",		--  jmp pushret_mangled_tempfile3.asm_15
		11 => "0001110000000001",		-- addl r4,1
		12 => "1001111000000100",		--setstk r6,r4
		13 => "0001111000000001",		-- addl r6,1
		14 => "1001111000000101",		--setstk r6,r5
		15 => "0001111000000001",		-- addl r6,1
		16 => "0110100001110110",		-- jmp mult8
		17 => "0010111000000010",		--	subl	r6,2
		18 => "0110100000010010",		--	jmp end
		19 => "1001111000000111",		--setstk r6,r7
		20 => "0001111000000001",		-- addl r6,1
		21 => "0000111100000110",		-- mov r7,r6
		22 => "1001111000000011",		--setstk r6,	r3
		23 => "0001111000000001",		-- addl r6,1
		24 => "0010111100000000",		--subl r7,0	
		25 => "0010111100000100",		-- subl r7,4
		26 => "1010000000000111",		-- getstk r0,r7
		27 => "0001111100000100",		-- addl r7,4
		28 => "0001111100000000",		-- addl r7,0	
		29 => "0010111100000001",		--subl r7,1	
		30 => "0010111100000100",		-- subl r7,4
		31 => "1010000100000111",		-- getstk r1,r7
		32 => "0001111100000100",		-- addl r7,4
		33 => "0001111100000001",		-- addl r7,1	
		34 => "0010111100000011",		--subl r7,3	
		35 => "0010111100000100",		-- subl r7,4
		36 => "1010001000000111",		-- getstk r2,r7
		37 => "0001111100000100",		-- addl r7,4
		38 => "0001111100000011",		-- addl r7,3	
		39 => "0010111100000010",		--subl r7,2	
		40 => "0010111100000100",		-- subl r7,4
		41 => "1010001100000111",		-- getstk r3,r7
		42 => "0001111100000100",		-- addl r7,4
		43 => "0001111100000010",		-- addl r7,2	
		44 => "0001000100000010",		--	add 	r1,r2
		45 => "1001000000101111",		--	jovf	add16_lo_ovflw
		46 => "0110100000110011",		--	jmp 	add16_add_hi_bytes
		47 => "0001100000000001",		--	addl 	r0,1
		48 => "1001000000110010",		--	jovf	add16_hi_ovflw_1
		49 => "0110100000110011",		--	jmp 	add16_add_hi_bytes
		50 => "0000001000000001",		--	set 	r2,1
		51 => "0001000000000011",		--	add 	r0,r3
		52 => "1001000000110111",		--	jovf	add16_hi_ovflw_2
		53 => "0000001000000000",		--	set 	r2,0
		54 => "0110100000111000",		--	jmp 	add16_exit
		55 => "0000001000000001",		--	set 	r2,1
		56 => "0010111000000001",		--subl r6,1
		57 => "1010001100000110",		-- getstk 	r3,r6
		58 => "0000111000000111",		--	mov r6,r7
		59 => "0010111000000001",		--subl r6,1
		60 => "1010011100000110",		-- getstk r7,r6
		61 => "0010111000000001",		--subl r6,1
		62 => "1010010100000110",		-- getstk r5,r6
		63 => "0010111000000001",		--subl r6,1
		64 => "1010010000000110",		-- getstk r4,r6
		65 => "1011110000000101",		-- setpc r4,r5
		66 => "1001111000000111",		--setstk r6,r7
		67 => "0001111000000001",		-- addl r6,1
		68 => "0000111100000110",		-- mov r7,r6
		69 => "1001111000000010",		--setstk r6,	r2
		70 => "0001111000000001",		-- addl r6,1
		71 => "1001111000000011",		--setstk r6,	r3
		72 => "0001111000000001",		-- addl r6,1
		73 => "0010111100000000",		--subl r7,0
		74 => "0010111100000100",		-- subl r7,4
		75 => "1010000000000111",		-- getstk r0,r7
		76 => "0001111100000100",		-- addl r7,4
		77 => "0001111100000000",		-- addl r7,0
		78 => "0010111100000001",		--subl r7,1
		79 => "0010111100000100",		-- subl r7,4
		80 => "1010000100000111",		-- getstk r1,r7
		81 => "0001111100000100",		-- addl r7,4
		82 => "0001111100000001",		-- addl r7,1
		83 => "0010111100000010",		--subl r7,2
		84 => "0010111100000100",		-- subl r7,4
		85 => "1010001000000111",		-- getstk r2,r7
		86 => "0001111100000100",		-- addl r7,4
		87 => "0001111100000010",		-- addl r7,2
		88 => "0000001100001000",		--	set 	r3,8
		89 => "0101101000000011",		--	cmp		r2,r3
		90 => "1000100001100011",		--	jlt		lsl16_shift_less_than_half
		91 => "0000000100000000",		--	set 	r1,0
		92 => "0010111100000001",		--subl r7,1
		93 => "0010111100000100",		-- subl r7,4
		94 => "1010000000000111",		-- getstk r0,r7
		95 => "0001111100000100",		-- addl r7,4
		96 => "0001111100000001",		-- addl r7,1
		97 => "0011000000000010",		--	lsl 	r0,r2
		98 => "0110100001101010",		--	jmp 	lsl16_exit
		99 => "0011000000000010",		--	lsl 	r0,r2
		100 => "0000001100001000",		--	set 	r3,8
		101 => "0010001100000010",		--	sub 	r3,r2	
		102 => "0000110000000001",		--	mov 	r4,r1
		103 => "0011110000000011",		--	lsr 	r4,r3
		104 => "0101000000000100",		--	or 		r0,r4
		105 => "0011000100000010",		--	lsl 	r1,r2
		106 => "0010111000000001",		--subl r6,1
		107 => "1010001100000110",		-- getstk 	r3,r6
		108 => "0010111000000001",		--subl r6,1
		109 => "1010001000000110",		-- getstk 	r2,r6
		110 => "0000111000000111",		--	mov r6,r7
		111 => "0010111000000001",		--subl r6,1
		112 => "1010011100000110",		-- getstk r7,r6
		113 => "0010111000000001",		--subl r6,1
		114 => "1010010100000110",		-- getstk r5,r6
		115 => "0010111000000001",		--subl r6,1
		116 => "1010010000000110",		-- getstk r4,r6
		117 => "1011110000000101",		-- setpc r4,r5
		118 => "1001111000000111",		--setstk r6,r7
		119 => "0001111000000001",		-- addl r6,1
		120 => "0000111100000110",		-- mov r7,r6
		121 => "0000001000000000",		--	set 	r2,0	
		122 => "0001111000000011",		--addl r6,	3
		123 => "0000000000000000",		--	set 	r0,0
		124 => "0001111100000000",		--addl r7,0
		125 => "1001111100000000",		-- setstk r7,r0	
		126 => "0010111100000000",		-- subl r7,0
		127 => "0001111100000001",		--addl r7,1
		128 => "1001111100000000",		-- setstk r7,r0	
		129 => "0010111100000001",		-- subl r7,1
		130 => "0000000000000001",		--	set 	r0,1
		131 => "0001111100000010",		--addl r7,2
		132 => "1001111100000000",		-- setstk r7,r0	
		133 => "0010111100000010",		-- subl r7,2
		134 => "0000001100000111",		--	set 	r3,7
		135 => "0101101000000011",		--	cmp 	r2,r3
		136 => "1000000011011010",		--	jgt 	mult8_exit
		137 => "0010111100000001",		--subl r7,1	
		138 => "0010111100000100",		-- subl r7,4
		139 => "1010000100000111",		-- getstk r1,r7
		140 => "0001111100000100",		-- addl r7,4
		141 => "0001111100000001",		-- addl r7,1	
		142 => "0001111100000010",		--addl r7,2	
		143 => "1010001100000111",		-- getstk r3,r7
		144 => "0010111100000010",		-- subl r7,2	
		145 => "0100100100000011",		--	and 	r1,r3
		146 => "0000001100000000",		--	set 	r3,0
		147 => "0101100100000011",		--	cmp		r1,r3
		148 => "0111100010010110",		--	jne		mult8_shift_and_add
		149 => "0110100011010000",		--	jmp		mult8_loop_end
		150 => "0000000000000000",		--	set 	r0,0
		151 => "0010111100000000",		--subl r7,0	
		152 => "0010111100000100",		-- subl r7,4
		153 => "1010000100000111",		-- getstk r1,r7
		154 => "0001111100000100",		-- addl r7,4
		155 => "0001111100000000",		-- addl r7,0	
		156 => "1001111000000010",		--setstk r6,r2		
		157 => "0001111000000001",		-- addl r6,1
		158 => "1001111000000001",		--setstk r6,r1
		159 => "0001111000000001",		-- addl r6,1
		160 => "1001111000000000",		--setstk r6,r0
		161 => "0001111000000001",		-- addl r6,1
		162 => "1010110100000000",		--getpcl r5
		163 => "1011010000000000",		-- getpch r4
		164 => "0001110100001011",		--  addl r5,11
		165 => "1001000010100111",		-- jovf inc_upper_mangled_tempfile3.asm_161
		166 => "0110100010101000",		--  jmp pushret_mangled_tempfile3.asm_161
		167 => "0001110000000001",		-- addl r4,1
		168 => "1001111000000100",		--setstk r6,r4
		169 => "0001111000000001",		-- addl r6,1
		170 => "1001111000000101",		--setstk r6,r5
		171 => "0001111000000001",		-- addl r6,1
		172 => "0110100001000010",		-- jmp lsl16
		173 => "0010111000000011",		--	subl	r6,3
		174 => "0001111100000000",		--addl r7,0	
		175 => "1010001100000111",		-- getstk r3,r7
		176 => "0010111100000000",		-- subl r7,0	
		177 => "0001111100000001",		--addl r7,1
		178 => "1010010000000111",		-- getstk r4,r7
		179 => "0010111100000001",		-- subl r7,1
		180 => "1001111000000100",		--setstk r6,r4
		181 => "0001111000000001",		-- addl r6,1
		182 => "1001111000000011",		--setstk r6,r3
		183 => "0001111000000001",		-- addl r6,1
		184 => "1001111000000001",		--setstk r6,r1
		185 => "0001111000000001",		-- addl r6,1
		186 => "1001111000000000",		--setstk r6,r0
		187 => "0001111000000001",		-- addl r6,1
		188 => "0000110000000010",		--	mov		r4,r2	
		189 => "1010110100000000",		--getpcl r5
		190 => "1011010000000000",		-- getpch r4
		191 => "0001110100001011",		--  addl r5,11
		192 => "1001000011000010",		-- jovf inc_upper_mangled_tempfile3.asm_172
		193 => "0110100011000011",		--  jmp pushret_mangled_tempfile3.asm_172
		194 => "0001110000000001",		-- addl r4,1
		195 => "1001111000000100",		--setstk r6,r4
		196 => "0001111000000001",		-- addl r6,1
		197 => "1001111000000101",		--setstk r6,r5
		198 => "0001111000000001",		-- addl r6,1
		199 => "0110100000010011",		-- jmp add16
		200 => "0010111000000100",		--	subl	r6,4
		201 => "0001111100000000",		--addl r7,0
		202 => "1001111100000000",		-- setstk r7,r0
		203 => "0010111100000000",		-- subl r7,0
		204 => "0001111100000001",		--addl r7,1
		205 => "1001111100000001",		-- setstk r7,r1
		206 => "0010111100000001",		-- subl r7,1
		207 => "0000101000000100",		--	mov		r2,r4
		208 => "0001111100000010",		--addl r7,2
		209 => "1010000000000111",		-- getstk r0,r7
		210 => "0010111100000010",		-- subl r7,2
		211 => "0000000100000001",		--	set 	r1,1
		212 => "0011000000000001",		--	lsl 	r0,r1
		213 => "0001111100000010",		--addl r7,2
		214 => "1001111100000000",		-- setstk r7,r0
		215 => "0010111100000010",		-- subl r7,2
		216 => "0001101000000001",		--	addl 	r2,1
		217 => "0110100010000110",		--	jmp 	mult8_loop
		218 => "0001111100000000",		--addl r7,0
		219 => "1010000000000111",		-- getstk r0,r7
		220 => "0010111100000000",		-- subl r7,0
		221 => "0001111100000001",		--addl r7,1
		222 => "1010000100000111",		-- getstk r1,r7
		223 => "0010111100000001",		-- subl r7,1
		224 => "0000111000000111",		--	mov r6,r7
		225 => "0010111000000001",		--subl r6,1
		226 => "1010011100000110",		-- getstk r7,r6
		227 => "0010111000000001",		--subl r6,1
		228 => "1010010100000110",		-- getstk r5,r6
		229 => "0010111000000001",		--subl r6,1
		230 => "1010010000000110",		-- getstk r4,r6
		231 => "1011110000000101",		-- setpc r4,r5


        others => "0000000000000000"
    );
    --signal prog_rom: prog_mem_t := HEXFILE;
begin
    
    uut: processor port map (
        temporary_processor_instr_input => instr_input,
        clk => clk,
        rst => rst,
        pc_out => pc
    );
    
    

    clk_proc: process
    begin
        clk <= '1';
        instr_input <= prog_rom(to_integer(unsigned(pc)));
        wait for 50ns;
        clk <= '0';
        wait for 50ns;
    end process;
    
    main_proc: process
    begin
        rst <= '0';
        wait for 360ns;
        rst <= '1';
        wait for 20ns;

        --let the program execute        
        wait for 1000000us;
        

    end process;

end Behavioral;
