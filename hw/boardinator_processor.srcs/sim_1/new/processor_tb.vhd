----------------------------------------------------------------------------------
--------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
use IEEE.NUMERIC_STD.ALL;

--use work.simple.all;

entity processor_tb is
--  Port ( );
end processor_tb;

architecture Behavioral of processor_tb is
    component processor
    Port ( temporary_processor_instr_input : in STD_LOGIC_VECTOR(15 downto 0);  --delet
           clk : in STD_LOGIC;
           ext_rst : in STD_LOGIC;
           pc_out : out STD_LOGIC_VECTOR (9 downto 0));
    end component;
    
    signal instr_input : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
    signal clk : std_logic := '0';
    signal ext_rst: std_logic := '1';
    signal pc: std_logic_vector(9 downto 0) := "0000000000";
    
    type prog_mem_t is array (999 downto 0) of std_logic_vector(15 downto 0);
    signal prog_rom: prog_mem_t :=
    (    
    			0 => "0000000000000101",		--	set		r0,5
		1 => "1001111000000000",		--	setmem r6,r0,0
		2 => "0001111000000001",		-- addl r6,1
		3 => "1010110100000000",		--	getpcl r5
		4 => "1011010000000000",		-- getpch r4
		5 => "0001110100001011",		--  addl r5,11
		6 => "1001000000001000",		-- jovf inc_upper_mangled_tempfile3.asm_24
		7 => "0110100000001001",		--  jmp pushret_mangled_tempfile3.asm_24
		8 => "0001110000000001",		-- addl r4,1
		9 => "1001111000000100",		-- setmem r6,r4,0
		10 => "0001111000000001",		-- addl r6,1
		11 => "1001111000000101",		-- setmem r6,r5,0
		12 => "0001111000000001",		-- addl r6,1
		13 => "0110100000010000",		-- jmp factorial
		14 => "0010111000000001",		--	subl	r6,1
		15 => "0110100000001111",		--	jmp		end
		16 => "1001111000000111",		--	setmem r6,r7,0
		17 => "0001111000000001",		-- addl r6,1
		18 => "0000111100000110",		-- mov r7,r6
		19 => "1001111000000010",		--	setmem r6,r2,0
		20 => "0001111000000001",		-- addl r6,1
		21 => "1001111000000011",		--	setmem r6,r3,0
		22 => "0001111000000001",		-- addl r6,1
		23 => "0010111100000000",		--	subl r7,0
		24 => "0010111100000100",		-- subl r7,4
		25 => "1010001000000111",		-- getmem 	r2,r7,0
		26 => "0001111100000100",		-- addl r7,4
		27 => "0001111100000000",		-- addl r7,0
		28 => "0000001100000001",		--	set		r3,1
		29 => "0000010000000001",		--	set		r4,1
		30 => "0101101000000100",		--	cmp		r2,r4
		31 => "0111000000110011",		--	jeq		factorial_exit
		32 => "1001111000000011",		--	setmem r6,r3,0
		33 => "0001111000000001",		-- addl r6,1
		34 => "1001111000000010",		--	setmem r6,r2,0
		35 => "0001111000000001",		-- addl r6,1
		36 => "1010110100000000",		--	getpcl r5
		37 => "1011010000000000",		-- getpch r4
		38 => "0001110100001011",		--  addl r5,11
		39 => "1001000000101001",		-- jovf inc_upper_mangled_tempfile3.asm_56
		40 => "0110100000101010",		--  jmp pushret_mangled_tempfile3.asm_56
		41 => "0001110000000001",		-- addl r4,1
		42 => "1001111000000100",		-- setmem r6,r4,0
		43 => "0001111000000001",		-- addl r6,1
		44 => "1001111000000101",		-- setmem r6,r5,0
		45 => "0001111000000001",		-- addl r6,1
		46 => "0110100001110011",		-- jmp mult8
		47 => "0010111000000010",		--	subl	r6,2
		48 => "0000101100000001",		--	mov		r3,r1
		49 => "0010101000000001",		--	subl	r2,1
		50 => "0110100000011101",		--	jmp		factorial_loop
		51 => "0000100000000011",		--	mov		r0,r3
		52 => "0010111000000001",		--	subl r6,1
		53 => "1010001100000110",		-- getmem 	r3,r6,0
		54 => "0010111000000001",		--	subl r6,1
		55 => "1010001000000110",		-- getmem 	r2,r6,0
		56 => "0000111000000111",		--	mov r6,r7
		57 => "0010111000000001",		-- subl r6,1
		58 => "1010011100000110",		-- getmem r7,r6,0
		59 => "0010111000000001",		--	subl r6,1
		60 => "1010010100000110",		-- getmem r5,r6,0
		61 => "0010111000000001",		-- subl r6,1
		62 => "1010010000000110",		-- getmem r4,r6,0
		63 => "1011110000000101",		-- setpc r4,r5
		64 => "0010111000000011",		--	subl r6,3
		65 => "1010000000000110",		--	getmem r0,r6,0 
		66 => "0010111000000001",		--	subl r6,1
		67 => "1010000100000110",		--	getmem r1,r6,0 
		68 => "0010111000000001",		--	subl r6,1
		69 => "1010010100000110",		--	getmem r5,r6,0 
		70 => "0010111000000001",		--	subl r6,1
		71 => "1010010000000110",		--	getmem r4,r6,0 
		72 => "0001111000000110",		--	addl r6,6
		73 => "0000001000000000",		--	set r2,0
		74 => "0001000100000100",		--	add r1,r4
		75 => "1001000001001101",		--	jovf add16_lo_ovflw
		76 => "0110100001010001",		--	jmp add16_add_hi_bytes
		77 => "0001100000000001",		--	addl r0,1
		78 => "1001000001010000",		--	jovf add16_hi_ovflw_1
		79 => "0110100001010001",		--	jmp add16_add_hi_bytes
		80 => "0000001000000001",		--	set r2,1
		81 => "0001000000000101",		--	add r0,r5
		82 => "1001000001010100",		--	jovf add16_hi_ovflw_2
		83 => "0110100001010101",		--	jmp add16_exit
		84 => "0000001000000001",		--	set r2,1
		85 => "0010111000000001",		--	subl r6,1
		86 => "1010010100000110",		-- getmem r5,r6,0
		87 => "0010111000000001",		-- subl r6,1
		88 => "1010010000000110",		-- getmem r4,r6,0
		89 => "1011110000000101",		-- setpc r4,r5
		90 => "0010111000000011",		--	subl r6,3
		91 => "1010000000000110",		--	getmem r0,r6,0 
		92 => "0010111000000001",		--	subl r6,1
		93 => "1010000100000110",		--	getmem r1,r6,0 
		94 => "0010111000000001",		--	subl r6,1
		95 => "1010001000000110",		--	getmem r2,r6,0 
		96 => "0001111000000101",		--	addl r6,5
		97 => "0000010100001000",		--	set 	r5,8
		98 => "0101101000000101",		--	cmp		r2,r5
		99 => "1000100001101000",		--	jlt		lsl16_shift_less_than_half
		100 => "0000100000000001",		--	mov 	r0,r1
		101 => "0000000100000000",		--	set 	r1,0
		102 => "0011000000000010",		--	lsl 	r0,r2
		103 => "0110100001101110",		--	jmp 	lsl16_exit
		104 => "0011000000000010",		--	lsl 	r0,r2	
		105 => "0010010100000010",		--	sub 	r5,r2	
		106 => "0000110000000001",		--	mov 	r4,r1
		107 => "0011110000000101",		--	lsr 	r4,r5	
		108 => "0101000000000100",		--	or 		r0,r4
		109 => "0011000100000010",		--	lsl 	r1,r2
		110 => "0010111000000001",		--	subl r6,1
		111 => "1010010100000110",		-- getmem r5,r6,0
		112 => "0010111000000001",		-- subl r6,1
		113 => "1010010000000110",		-- getmem r4,r6,0
		114 => "1011110000000101",		-- setpc r4,r5
		115 => "1001111000000111",		--	setmem r6,r7,0
		116 => "0001111000000001",		-- addl r6,1
		117 => "0000111100000110",		-- mov r7,r6
		118 => "0001111000000011",		--	addl r6,	3
		119 => "1001111000000010",		--	setmem r6,	r2,0
		120 => "0001111000000001",		-- addl r6,1
		121 => "1001111000000011",		--	setmem r6,	r3,0
		122 => "0001111000000001",		-- addl r6,1
		123 => "0000001000000000",		--	set 	r2,0	
		124 => "0000000000000000",		--	set 	r0,0
		125 => "0001111100000000",		--	addl r7,0
		126 => "1001111100000000",		-- setmem r7,r0	,0
		127 => "0010111100000000",		-- subl r7,0	
		128 => "0001111100000001",		--	addl r7,1
		129 => "1001111100000000",		-- setmem r7,r0	,0
		130 => "0010111100000001",		-- subl r7,1	
		131 => "0000000000000001",		--	set 	r0,1
		132 => "0001111100000010",		--	addl r7,2
		133 => "1001111100000000",		-- setmem r7,r0	,0
		134 => "0010111100000010",		-- subl r7,2	
		135 => "0000001100000111",		--	set 	r3,7
		136 => "0101101000000011",		--	cmp 	r2,r3
		137 => "1000000011011011",		--	jgt 	mult8_exit
		138 => "0010111100000001",		--	subl r7,1	
		139 => "0010111100000100",		-- subl r7,4
		140 => "1010000100000111",		-- getmem r1,r7,0
		141 => "0001111100000100",		-- addl r7,4
		142 => "0001111100000001",		-- addl r7,1		
		143 => "0001111100000010",		--	addl r7,2	
		144 => "1010001100000111",		-- getmem r3,r7,0
		145 => "0010111100000010",		-- subl r7,2		
		146 => "0100100100000011",		--	and 	r1,r3
		147 => "0000001100000000",		--	set 	r3,0
		148 => "0101100100000011",		--	cmp		r1,r3
		149 => "0111100010010111",		--	jne		mult8_shift_and_add
		150 => "0110100011010001",		--	jmp		mult8_loop_end
		151 => "0000000000000000",		--	set 	r0,0
		152 => "0010111100000000",		--	subl r7,0	
		153 => "0010111100000100",		-- subl r7,4
		154 => "1010000100000111",		-- getmem r1,r7,0
		155 => "0001111100000100",		-- addl r7,4
		156 => "0001111100000000",		-- addl r7,0		
		157 => "1001111000000010",		--	setmem r6,r2		,0
		158 => "0001111000000001",		-- addl r6,1		
		159 => "1001111000000001",		--	setmem r6,r1,0
		160 => "0001111000000001",		-- addl r6,1
		161 => "1001111000000000",		--	setmem r6,r0,0
		162 => "0001111000000001",		-- addl r6,1
		163 => "1010110100000000",		--	getpcl r5
		164 => "1011010000000000",		-- getpch r4
		165 => "0001110100001011",		--  addl r5,11
		166 => "1001000010101000",		-- jovf inc_upper_mangled_tempfile3.asm_171
		167 => "0110100010101001",		--  jmp pushret_mangled_tempfile3.asm_171
		168 => "0001110000000001",		-- addl r4,1
		169 => "1001111000000100",		-- setmem r6,r4,0
		170 => "0001111000000001",		-- addl r6,1
		171 => "1001111000000101",		-- setmem r6,r5,0
		172 => "0001111000000001",		-- addl r6,1
		173 => "0110100001011010",		-- jmp lsl16
		174 => "0010111000000011",		--	subl	r6,3
		175 => "0001111100000000",		--	addl r7,0	
		176 => "1010001100000111",		-- getmem r3,r7,0
		177 => "0010111100000000",		-- subl r7,0		
		178 => "0001111100000001",		--	addl r7,1
		179 => "1010010000000111",		-- getmem r4,r7,0
		180 => "0010111100000001",		-- subl r7,1
		181 => "1001111000000100",		--	setmem r6,r4,0
		182 => "0001111000000001",		-- addl r6,1
		183 => "1001111000000011",		--	setmem r6,r3,0
		184 => "0001111000000001",		-- addl r6,1
		185 => "1001111000000001",		--	setmem r6,r1,0
		186 => "0001111000000001",		-- addl r6,1
		187 => "1001111000000000",		--	setmem r6,r0,0
		188 => "0001111000000001",		-- addl r6,1
		189 => "0000101100000010",		--	mov		r3,r2	
		190 => "1010110100000000",		--	getpcl r5
		191 => "1011010000000000",		-- getpch r4
		192 => "0001110100001011",		--  addl r5,11
		193 => "1001000011000011",		-- jovf inc_upper_mangled_tempfile3.asm_182
		194 => "0110100011000100",		--  jmp pushret_mangled_tempfile3.asm_182
		195 => "0001110000000001",		-- addl r4,1
		196 => "1001111000000100",		-- setmem r6,r4,0
		197 => "0001111000000001",		-- addl r6,1
		198 => "1001111000000101",		-- setmem r6,r5,0
		199 => "0001111000000001",		-- addl r6,1
		200 => "0110100001000000",		-- jmp add16
		201 => "0010111000000100",		--	subl	r6,4
		202 => "0001111100000000",		--	addl r7,0
		203 => "1001111100000000",		-- setmem r7,r0,0
		204 => "0010111100000000",		-- subl r7,0
		205 => "0001111100000001",		--	addl r7,1
		206 => "1001111100000001",		-- setmem r7,r1,0
		207 => "0010111100000001",		-- subl r7,1
		208 => "0000101000000011",		--	mov		r2,r3
		209 => "0001111100000010",		--	addl r7,2
		210 => "1010000000000111",		-- getmem r0,r7,0
		211 => "0010111100000010",		-- subl r7,2
		212 => "0000000100000001",		--	set 	r1,1
		213 => "0011000000000001",		--	lsl 	r0,r1
		214 => "0001111100000010",		--	addl r7,2
		215 => "1001111100000000",		-- setmem r7,r0,0
		216 => "0010111100000010",		-- subl r7,2
		217 => "0001101000000001",		--	addl 	r2,1
		218 => "0110100010000111",		--	jmp 	mult8_loop
		219 => "0001111100000000",		--	addl r7,0
		220 => "1010000000000111",		-- getmem r0,r7,0
		221 => "0010111100000000",		-- subl r7,0
		222 => "0001111100000001",		--	addl r7,1
		223 => "1010000100000111",		-- getmem r1,r7,0
		224 => "0010111100000001",		-- subl r7,1
		225 => "0010111000000001",		--	subl r6,1
		226 => "1010001100000110",		-- getmem 	r3,r6,0
		227 => "0010111000000001",		--	subl r6,1
		228 => "1010001000000110",		-- getmem 	r2,r6,0
		229 => "0000111000000111",		--	mov r6,r7
		230 => "0010111000000001",		-- subl r6,1
		231 => "1010011100000110",		-- getmem r7,r6,0
		232 => "0010111000000001",		--	subl r6,1
		233 => "1010010100000110",		-- getmem r5,r6,0
		234 => "0010111000000001",		-- subl r6,1
		235 => "1010010000000110",		-- getmem r4,r6,0
		236 => "1011110000000101",		-- setpc r4,r5


        others => "0000000000000000"
    );
    --signal prog_rom: prog_mem_t := HEXFILE;
begin
    
    uut: processor port map (
        temporary_processor_instr_input => instr_input,
        clk => clk,
        ext_rst => ext_rst,
        pc_out => pc
    );
    
    

    --10MHz
    clk_proc: process
    begin
        clk <= '1';
        instr_input <= prog_rom(to_integer(unsigned(pc)));
        wait for 50ns;
        clk <= '0';
        wait for 50ns;
    end process;
    
--    main_proc: process
--    begin
--        --ext_rst <= '0';
--        --wait for 360ns;
--        --ext_rst <= '1';
--        --wait for 20ns;

--        --let the program execute        
--        wait for 1000*1000ms;
        

--    end process;

end Behavioral;
