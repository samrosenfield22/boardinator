----------------------------------------------------------------------------------
--------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
use IEEE.NUMERIC_STD.ALL;

--use work.simple.all;

entity processor_tb is
--  Port ( );
end processor_tb;

architecture Behavioral of processor_tb is
    component processor
    Port ( temporary_processor_instr_input : in STD_LOGIC_VECTOR(15 downto 0);  --delet
           clk : in STD_LOGIC;
           rst : in STD_LOGIC;
           pc_out : out STD_LOGIC_VECTOR (9 downto 0));
    end component;
    
    signal instr_input : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
    signal clk : std_logic := '0';
    signal rst: std_logic := '1';
    signal pc: std_logic_vector(9 downto 0) := "0000000000";
    
    type prog_mem_t is array (999 downto 0) of std_logic_vector(15 downto 0);
    signal prog_rom: prog_mem_t :=
    (    
    			0 => "0000000000101010",		--	set 	r0,0x2A
		1 => "0000000111100001",		--	set 	r1,0xE1
		2 => "0000001010001000",		--	set 	r2,0x88
		3 => "0000001111111111",		--	set 	r3,0xFF
		4 => "1001111000000011",		--setstk r6,r3
		5 => "0001111000000001",		-- addl r6,1
		6 => "1001111000000010",		--setstk r6,r2
		7 => "0001111000000001",		-- addl r6,1
		8 => "1001111000000001",		--setstk r6,r1
		9 => "0001111000000001",		-- addl r6,1
		10 => "1001111000000000",		--setstk r6,r0
		11 => "0001111000000001",		-- addl r6,1
		12 => "1010110100000000",		--getpcl r5
		13 => "1011010000000000",		-- getpch r4
		14 => "0001110100001011",		--  addl r5,11
		15 => "1001000000010001",		-- jovf inc_upper_mangled_tempfile3.asm_18
		16 => "0110100000010010",		--  jmp pushret_mangled_tempfile3.asm_18
		17 => "0001110000000001",		-- addl r4,1
		18 => "1001111000000100",		--setstk r6,r4
		19 => "0001111000000001",		-- addl r6,1
		20 => "1001111000000101",		--setstk r6,r5
		21 => "0001111000000001",		-- addl r6,1
		22 => "0110100000110011",		-- jmp add16
		23 => "0010111000000100",		--	subl	r6,4
		24 => "0000000000000000",		--	set 	r0,0
		25 => "0000000100000001",		--	set 	r1,1
		26 => "0000001000000000",		--	set 	r2,0
		27 => "0000001100000001",		--	set 	r3,1
		28 => "1001111000000011",		--setstk r6,r3
		29 => "0001111000000001",		-- addl r6,1
		30 => "1001111000000001",		--setstk r6,r1
		31 => "0001111000000001",		-- addl r6,1
		32 => "1001111000000000",		--setstk r6,r0
		33 => "0001111000000001",		-- addl r6,1
		34 => "1010110100000000",		--getpcl r5
		35 => "1011010000000000",		-- getpch r4
		36 => "0001110100001011",		--  addl r5,11
		37 => "1001000000100111",		-- jovf inc_upper_mangled_tempfile3.asm_40
		38 => "0110100000101000",		--  jmp pushret_mangled_tempfile3.asm_40
		39 => "0001110000000001",		-- addl r4,1
		40 => "1001111000000100",		--setstk r6,r4
		41 => "0001111000000001",		-- addl r6,1
		42 => "1001111000000101",		--setstk r6,r5
		43 => "0001111000000001",		-- addl r6,1
		44 => "0110100001011110",		-- jmp lsl16
		45 => "0010111000000011",		--	subl	r6,3
		46 => "0101100000000010",		--	cmp 	r0,r2
		47 => "0111100000011100",		--	jne 	shift_loop
		48 => "0101100100000010",		--	cmp 	r1,r2
		49 => "0111100000011100",		--	jne 	shift_loop
		50 => "0110100000110010",		--	jmp		end
		51 => "1001111000000111",		--setstk r6,r7
		52 => "0001111000000001",		-- addl r6,1
		53 => "0000111100000110",		-- mov r7,r6
		54 => "0010111100000000",		--subl r7,0	
		55 => "0010111100000100",		-- subl r7,4
		56 => "1010000000000111",		-- getstk r0,r7
		57 => "0001111100000100",		-- addl r7,4
		58 => "0001111100000000",		-- addl r7,0	
		59 => "0010111100000001",		--subl r7,1	
		60 => "0010111100000100",		-- subl r7,4
		61 => "1010000100000111",		-- getstk r1,r7
		62 => "0001111100000100",		-- addl r7,4
		63 => "0001111100000001",		-- addl r7,1	
		64 => "0010111100000011",		--subl r7,3	
		65 => "0010111100000100",		-- subl r7,4
		66 => "1010001000000111",		-- getstk r2,r7
		67 => "0001111100000100",		-- addl r7,4
		68 => "0001111100000011",		-- addl r7,3	
		69 => "0010111100000010",		--subl r7,2	
		70 => "0010111100000100",		-- subl r7,4
		71 => "1010001100000111",		-- getstk r3,r7
		72 => "0001111100000100",		-- addl r7,4
		73 => "0001111100000010",		-- addl r7,2	
		74 => "0001000100000010",		--	add 	r1,r2
		75 => "1001000001001101",		--	jovf	add16_lo_ovflw
		76 => "0110100001010001",		--	jmp 	add16_add_hi_bytes
		77 => "0001100000000001",		--	addl 	r0,1
		78 => "1001000001010000",		--	jovf	add16_hi_ovflw_1
		79 => "0110100001010001",		--	jmp 	add16_add_hi_bytes
		80 => "0000001000000001",		--	set 	r2,1
		81 => "0001000000000011",		--	add 	r0,r3
		82 => "1001000001010101",		--	jovf	add16_hi_ovflw_2
		83 => "0000001000000000",		--	set 	r2,0
		84 => "0110100001010110",		--	jmp 	add16_exit
		85 => "0000001000000001",		--	set 	r2,1
		86 => "0000111000000111",		--	mov r6,r7
		87 => "0010111000000001",		--subl r6,1
		88 => "1010011100000110",		-- getstk r7,r6
		89 => "0010111000000001",		--subl r6,1
		90 => "1010010100000110",		-- getstk r5,r6
		91 => "0010111000000001",		--subl r6,1
		92 => "1010010000000110",		-- getstk r4,r6
		93 => "1011110000000101",		-- setpc r4,r5
		94 => "1001111000000111",		--setstk r6,r7
		95 => "0001111000000001",		-- addl r6,1
		96 => "0000111100000110",		-- mov r7,r6
		97 => "1001111000000010",		--setstk r6,	r2
		98 => "0001111000000001",		-- addl r6,1
		99 => "1001111000000011",		--setstk r6,	r3
		100 => "0001111000000001",		-- addl r6,1
		101 => "1001111000000100",		--setstk r6,r4
		102 => "0001111000000001",		-- addl r6,1
		103 => "0010111100000000",		--subl r7,0
		104 => "0010111100000100",		-- subl r7,4
		105 => "1010000000000111",		-- getstk r0,r7
		106 => "0001111100000100",		-- addl r7,4
		107 => "0001111100000000",		-- addl r7,0
		108 => "0010111100000001",		--subl r7,1
		109 => "0010111100000100",		-- subl r7,4
		110 => "1010000100000111",		-- getstk r1,r7
		111 => "0001111100000100",		-- addl r7,4
		112 => "0001111100000001",		-- addl r7,1
		113 => "0010111100000010",		--subl r7,2
		114 => "0010111100000100",		-- subl r7,4
		115 => "1010001000000111",		-- getstk r2,r7
		116 => "0001111100000100",		-- addl r7,4
		117 => "0001111100000010",		-- addl r7,2
		118 => "0000001100001000",		--	set 	r3,8
		119 => "0101101000000011",		--	cmp		r2,r3
		120 => "1000100010000001",		--	jlt		lsl16_shift_less_than_half
		121 => "0000000100000000",		--	set 	r1,0
		122 => "0010111100000001",		--subl r7,1
		123 => "0010111100000100",		-- subl r7,4
		124 => "1010000000000111",		-- getstk r0,r7
		125 => "0001111100000100",		-- addl r7,4
		126 => "0001111100000001",		-- addl r7,1
		127 => "0011000000000010",		--	lsl 	r0,r2
		128 => "0110100010001000",		--	jmp 	lsl16_exit
		129 => "0011000000000010",		--	lsl 	r0,r2
		130 => "0000001100001000",		--	set 	r3,8
		131 => "0010001100000010",		--	sub 	r3,r2	
		132 => "0000110000000001",		--	mov 	r4,r1
		133 => "0011110000000011",		--	lsr 	r4,r3
		134 => "0101000000000100",		--	or 		r0,r4
		135 => "0011000100000010",		--	lsl 	r1,r2
		136 => "0010111000000001",		--subl r6,1
		137 => "1010010000000110",		-- getstk 	r4,r6
		138 => "0010111000000001",		--subl r6,1
		139 => "1010001100000110",		-- getstk 	r3,r6
		140 => "0010111000000001",		--subl r6,1
		141 => "1010001000000110",		-- getstk 	r2,r6
		142 => "0000111000000111",		--	mov r6,r7
		143 => "0010111000000001",		--subl r6,1
		144 => "1010011100000110",		-- getstk r7,r6
		145 => "0010111000000001",		--subl r6,1
		146 => "1010010100000110",		-- getstk r5,r6
		147 => "0010111000000001",		--subl r6,1
		148 => "1010010000000110",		-- getstk r4,r6
		149 => "1011110000000101",		-- setpc r4,r5


        others => "0000000000000000"
    );
    --signal prog_rom: prog_mem_t := HEXFILE;
begin
    
    uut: processor port map (
        temporary_processor_instr_input => instr_input,
        clk => clk,
        rst => rst,
        pc_out => pc
    );
    
    

    clk_proc: process
    begin
        clk <= '1';
        instr_input <= prog_rom(to_integer(unsigned(pc)));
        wait for 50ns;
        clk <= '0';
        wait for 50ns;
    end process;
    
    main_proc: process
    begin
        rst <= '0';
        wait for 360ns;
        rst <= '1';
        wait for 20ns;

        --let the program execute        
        wait for 10000us;
        

    end process;

end Behavioral;
