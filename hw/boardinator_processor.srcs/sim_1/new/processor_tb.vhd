----------------------------------------------------------------------------------
--------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
use IEEE.NUMERIC_STD.ALL;

--use work.simple.all;

entity processor_tb is
--  Port ( );
end processor_tb;

architecture Behavioral of processor_tb is
    component processor
    Port ( temporary_processor_instr_input : in STD_LOGIC_VECTOR(15 downto 0);  --delet
           clk : in STD_LOGIC;
           ext_rst : in STD_LOGIC;
           pc_out : out STD_LOGIC_VECTOR (9 downto 0));
    end component;
    
    signal instr_input : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
    signal clk : std_logic := '0';
    signal ext_rst: std_logic := '1';
    signal pc: std_logic_vector(9 downto 0) := "0000000000";
    
    type prog_mem_t is array (999 downto 0) of std_logic_vector(15 downto 0);
    signal prog_rom: prog_mem_t :=
    (    
    			0 => "0000000000000101",		--	set		r0,5
		1 => "1001111000000000",		--	setmem r6,r0,0
		2 => "0001111000000001",		-- addl r6,1
		3 => "1010110100000000",		--	getpcl r5
		4 => "1011010000000000",		-- getpch r4
		5 => "0001110100001011",		--  addl r5,11
		6 => "1001000000001000",		-- jovf inc_upper_mangled_tempfile3.asm_11
		7 => "0110100000001001",		--  jmp pushret_mangled_tempfile3.asm_11
		8 => "0001110000000001",		-- addl r4,1
		9 => "1001111000000100",		-- setmem r6,r4,0
		10 => "0001111000000001",		-- addl r6,1
		11 => "1001111000000101",		-- setmem r6,r5,0
		12 => "0001111000000001",		-- addl r6,1
		13 => "0110100000010100",		-- jmp factorial
		14 => "0010111000000001",		--	subl	r6,1
		15 => "0000001000000000",		--	set 	r2,0
		16 => "0000001110000000",		--	set 	r3,0x80
		17 => "0010111010000011",		--	illegal op
		18 => "0001100000000000",		--	addl r0,0
		19 => "0110100000010011",		--	jmp		end
		20 => "1001111000000111",		--	setmem r6,r7,0
		21 => "0001111000000001",		-- addl r6,1
		22 => "0000111100000110",		-- mov r7,r6
		23 => "1001111000000010",		--	setmem r6,r2,0
		24 => "0001111000000001",		-- addl r6,1
		25 => "1001111000000011",		--	setmem r6,r3,0
		26 => "0001111000000001",		-- addl r6,1
		27 => "0010111100000000",		--	subl r7,0
		28 => "0010111100000100",		-- subl r7,4
		29 => "1010001000000111",		-- getmem 	r2,r7,0
		30 => "0001111100000100",		-- addl r7,4
		31 => "0001111100000000",		-- addl r7,0
		32 => "0000001100000001",		--	set		r3,1
		33 => "0000010000000001",		--	set		r4,1
		34 => "0101101000000100",		--	cmp		r2,r4
		35 => "0111000000110111",		--	jeq		factorial_exit
		36 => "1001111000000011",		--	setmem r6,r3,0
		37 => "0001111000000001",		-- addl r6,1
		38 => "1001111000000010",		--	setmem r6,r2,0
		39 => "0001111000000001",		-- addl r6,1
		40 => "1010110100000000",		--	getpcl r5
		41 => "1011010000000000",		-- getpch r4
		42 => "0001110100001011",		--  addl r5,11
		43 => "1001000000101101",		-- jovf inc_upper_mangled_tempfile3.asm_43
		44 => "0110100000101110",		--  jmp pushret_mangled_tempfile3.asm_43
		45 => "0001110000000001",		-- addl r4,1
		46 => "1001111000000100",		-- setmem r6,r4,0
		47 => "0001111000000001",		-- addl r6,1
		48 => "1001111000000101",		-- setmem r6,r5,0
		49 => "0001111000000001",		-- addl r6,1
		50 => "0110100010100111",		-- jmp mult8
		51 => "0010111000000010",		--	subl	r6,2
		52 => "0000101100000001",		--	mov		r3,r1
		53 => "0010101000000001",		--	subl	r2,1
		54 => "0110100000100001",		--	jmp		factorial_loop
		55 => "0000100000000011",		--	mov		r0,r3
		56 => "0010111000000001",		--	subl r6,1
		57 => "1010001100000110",		-- getmem 	r3,r6,0
		58 => "0010111000000001",		--	subl r6,1
		59 => "1010001000000110",		-- getmem 	r2,r6,0
		60 => "0000111000000111",		--	mov r6,r7
		61 => "0010111000000001",		-- subl r6,1
		62 => "1010011100000110",		-- getmem r7,r6,0
		63 => "0010111000000001",		--	subl r6,1
		64 => "1010010100000110",		-- getmem r5,r6,0
		65 => "0010111000000001",		-- subl r6,1
		66 => "1010010000000110",		-- getmem r4,r6,0
		67 => "1011110000000101",		-- setpc r4,r5
		68 => "1001111000000111",		--	setmem r6,r7,0
		69 => "0001111000000001",		-- addl r6,1
		70 => "0000111100000110",		-- mov r7,r6
		71 => "1001111000000011",		--	setmem r6,	r3,0
		72 => "0001111000000001",		-- addl r6,1
		73 => "0010111100000000",		--	subl r7,0	
		74 => "0010111100000100",		-- subl r7,4
		75 => "1010000000000111",		-- getmem r0,r7,0
		76 => "0001111100000100",		-- addl r7,4
		77 => "0001111100000000",		-- addl r7,0		
		78 => "0010111100000001",		--	subl r7,1	
		79 => "0010111100000100",		-- subl r7,4
		80 => "1010000100000111",		-- getmem r1,r7,0
		81 => "0001111100000100",		-- addl r7,4
		82 => "0001111100000001",		-- addl r7,1		
		83 => "0010111100000011",		--	subl r7,3	
		84 => "0010111100000100",		-- subl r7,4
		85 => "1010001000000111",		-- getmem r2,r7,0
		86 => "0001111100000100",		-- addl r7,4
		87 => "0001111100000011",		-- addl r7,3		
		88 => "0010111100000010",		--	subl r7,2	
		89 => "0010111100000100",		-- subl r7,4
		90 => "1010001100000111",		-- getmem r3,r7,0
		91 => "0001111100000100",		-- addl r7,4
		92 => "0001111100000010",		-- addl r7,2		
		93 => "0001000100000010",		--	add 	r1,r2
		94 => "1001000001100000",		--	jovf	add16_lo_ovflw
		95 => "0110100001100100",		--	jmp 	add16_add_hi_bytes
		96 => "0001100000000001",		--	addl 	r0,1
		97 => "1001000001100011",		--	jovf	add16_hi_ovflw_1
		98 => "0110100001100100",		--	jmp 	add16_add_hi_bytes
		99 => "0000001000000001",		--	set 	r2,1
		100 => "0001000000000011",		--	add 	r0,r3
		101 => "1001000001101000",		--	jovf	add16_hi_ovflw_2
		102 => "0000001000000000",		--	set 	r2,0
		103 => "0110100001101001",		--	jmp 	add16_exit
		104 => "0000001000000001",		--	set 	r2,1
		105 => "0010111000000001",		--	subl r6,1
		106 => "1010001100000110",		-- getmem 	r3,r6,0
		107 => "0000111000000111",		--	mov r6,r7
		108 => "0010111000000001",		-- subl r6,1
		109 => "1010011100000110",		-- getmem r7,r6,0
		110 => "0010111000000001",		--	subl r6,1
		111 => "1010010100000110",		-- getmem r5,r6,0
		112 => "0010111000000001",		-- subl r6,1
		113 => "1010010000000110",		-- getmem r4,r6,0
		114 => "1011110000000101",		-- setpc r4,r5
		115 => "1001111000000111",		--	setmem r6,r7,0
		116 => "0001111000000001",		-- addl r6,1
		117 => "0000111100000110",		-- mov r7,r6
		118 => "1001111000000010",		--	setmem r6,	r2,0
		119 => "0001111000000001",		-- addl r6,1
		120 => "1001111000000011",		--	setmem r6,	r3,0
		121 => "0001111000000001",		-- addl r6,1
		122 => "0010111100000000",		--	subl r7,0
		123 => "0010111100000100",		-- subl r7,4
		124 => "1010000000000111",		-- getmem r0,r7,0
		125 => "0001111100000100",		-- addl r7,4
		126 => "0001111100000000",		-- addl r7,0
		127 => "0010111100000001",		--	subl r7,1
		128 => "0010111100000100",		-- subl r7,4
		129 => "1010000100000111",		-- getmem r1,r7,0
		130 => "0001111100000100",		-- addl r7,4
		131 => "0001111100000001",		-- addl r7,1
		132 => "0010111100000010",		--	subl r7,2
		133 => "0010111100000100",		-- subl r7,4
		134 => "1010001000000111",		-- getmem r2,r7,0
		135 => "0001111100000100",		-- addl r7,4
		136 => "0001111100000010",		-- addl r7,2
		137 => "0000001100001000",		--	set 	r3,8
		138 => "0101101000000011",		--	cmp		r2,r3
		139 => "1000100010010100",		--	jlt		lsl16_shift_less_than_half
		140 => "0000000100000000",		--	set 	r1,0
		141 => "0010111100000001",		--	subl r7,1
		142 => "0010111100000100",		-- subl r7,4
		143 => "1010000000000111",		-- getmem r0,r7,0
		144 => "0001111100000100",		-- addl r7,4
		145 => "0001111100000001",		-- addl r7,1
		146 => "0011000000000010",		--	lsl 	r0,r2
		147 => "0110100010011011",		--	jmp 	lsl16_exit
		148 => "0011000000000010",		--	lsl 	r0,r2
		149 => "0000001100001000",		--	set 	r3,8
		150 => "0010001100000010",		--	sub 	r3,r2	
		151 => "0000110000000001",		--	mov 	r4,r1
		152 => "0011110000000011",		--	lsr 	r4,r3
		153 => "0101000000000100",		--	or 		r0,r4
		154 => "0011000100000010",		--	lsl 	r1,r2
		155 => "0010111000000001",		--	subl r6,1
		156 => "1010001100000110",		-- getmem 	r3,r6,0
		157 => "0010111000000001",		--	subl r6,1
		158 => "1010001000000110",		-- getmem 	r2,r6,0
		159 => "0000111000000111",		--	mov r6,r7
		160 => "0010111000000001",		-- subl r6,1
		161 => "1010011100000110",		-- getmem r7,r6,0
		162 => "0010111000000001",		--	subl r6,1
		163 => "1010010100000110",		-- getmem r5,r6,0
		164 => "0010111000000001",		-- subl r6,1
		165 => "1010010000000110",		-- getmem r4,r6,0
		166 => "1011110000000101",		-- setpc r4,r5
		167 => "1001111000000111",		--	setmem r6,r7,0
		168 => "0001111000000001",		-- addl r6,1
		169 => "0000111100000110",		-- mov r7,r6
		170 => "0001111000000011",		--	addl r6,	3
		171 => "1001111000000010",		--	setmem r6,	r2,0
		172 => "0001111000000001",		-- addl r6,1
		173 => "1001111000000011",		--	setmem r6,	r3,0
		174 => "0001111000000001",		-- addl r6,1
		175 => "0000001000000000",		--	set 	r2,0	
		176 => "0000000000000000",		--	set 	r0,0
		177 => "0001111100000000",		--	addl r7,0
		178 => "1001111100000000",		-- setmem r7,r0	,0
		179 => "0010111100000000",		-- subl r7,0	
		180 => "0001111100000001",		--	addl r7,1
		181 => "1001111100000000",		-- setmem r7,r0	,0
		182 => "0010111100000001",		-- subl r7,1	
		183 => "0000000000000001",		--	set 	r0,1
		184 => "0001111100000010",		--	addl r7,2
		185 => "1001111100000000",		-- setmem r7,r0	,0
		186 => "0010111100000010",		-- subl r7,2	
		187 => "0000001100000111",		--	set 	r3,7
		188 => "0101101000000011",		--	cmp 	r2,r3
		189 => "1000000100001111",		--	jgt 	mult8_exit
		190 => "0010111100000001",		--	subl r7,1	
		191 => "0010111100000100",		-- subl r7,4
		192 => "1010000100000111",		-- getmem r1,r7,0
		193 => "0001111100000100",		-- addl r7,4
		194 => "0001111100000001",		-- addl r7,1		
		195 => "0001111100000010",		--	addl r7,2	
		196 => "1010001100000111",		-- getmem r3,r7,0
		197 => "0010111100000010",		-- subl r7,2		
		198 => "0100100100000011",		--	and 	r1,r3
		199 => "0000001100000000",		--	set 	r3,0
		200 => "0101100100000011",		--	cmp		r1,r3
		201 => "0111100011001011",		--	jne		mult8_shift_and_add
		202 => "0110100100000101",		--	jmp		mult8_loop_end
		203 => "0000000000000000",		--	set 	r0,0
		204 => "0010111100000000",		--	subl r7,0	
		205 => "0010111100000100",		-- subl r7,4
		206 => "1010000100000111",		-- getmem r1,r7,0
		207 => "0001111100000100",		-- addl r7,4
		208 => "0001111100000000",		-- addl r7,0		
		209 => "1001111000000010",		--	setmem r6,r2		,0
		210 => "0001111000000001",		-- addl r6,1		
		211 => "1001111000000001",		--	setmem r6,r1,0
		212 => "0001111000000001",		-- addl r6,1
		213 => "1001111000000000",		--	setmem r6,r0,0
		214 => "0001111000000001",		-- addl r6,1
		215 => "1010110100000000",		--	getpcl r5
		216 => "1011010000000000",		-- getpch r4
		217 => "0001110100001011",		--  addl r5,11
		218 => "1001000011011100",		-- jovf inc_upper_mangled_tempfile3.asm_167
		219 => "0110100011011101",		--  jmp pushret_mangled_tempfile3.asm_167
		220 => "0001110000000001",		-- addl r4,1
		221 => "1001111000000100",		-- setmem r6,r4,0
		222 => "0001111000000001",		-- addl r6,1
		223 => "1001111000000101",		-- setmem r6,r5,0
		224 => "0001111000000001",		-- addl r6,1
		225 => "0110100001110011",		-- jmp lsl16
		226 => "0010111000000011",		--	subl	r6,3
		227 => "0001111100000000",		--	addl r7,0	
		228 => "1010001100000111",		-- getmem r3,r7,0
		229 => "0010111100000000",		-- subl r7,0		
		230 => "0001111100000001",		--	addl r7,1
		231 => "1010010000000111",		-- getmem r4,r7,0
		232 => "0010111100000001",		-- subl r7,1
		233 => "1001111000000100",		--	setmem r6,r4,0
		234 => "0001111000000001",		-- addl r6,1
		235 => "1001111000000011",		--	setmem r6,r3,0
		236 => "0001111000000001",		-- addl r6,1
		237 => "1001111000000001",		--	setmem r6,r1,0
		238 => "0001111000000001",		-- addl r6,1
		239 => "1001111000000000",		--	setmem r6,r0,0
		240 => "0001111000000001",		-- addl r6,1
		241 => "0000101100000010",		--	mov		r3,r2	
		242 => "1010110100000000",		--	getpcl r5
		243 => "1011010000000000",		-- getpch r4
		244 => "0001110100001011",		--  addl r5,11
		245 => "1001000011110111",		-- jovf inc_upper_mangled_tempfile3.asm_178
		246 => "0110100011111000",		--  jmp pushret_mangled_tempfile3.asm_178
		247 => "0001110000000001",		-- addl r4,1
		248 => "1001111000000100",		-- setmem r6,r4,0
		249 => "0001111000000001",		-- addl r6,1
		250 => "1001111000000101",		-- setmem r6,r5,0
		251 => "0001111000000001",		-- addl r6,1
		252 => "0110100001000100",		-- jmp add16
		253 => "0010111000000100",		--	subl	r6,4
		254 => "0001111100000000",		--	addl r7,0
		255 => "1001111100000000",		-- setmem r7,r0,0
		256 => "0010111100000000",		-- subl r7,0
		257 => "0001111100000001",		--	addl r7,1
		258 => "1001111100000001",		-- setmem r7,r1,0
		259 => "0010111100000001",		-- subl r7,1
		260 => "0000101000000011",		--	mov		r2,r3
		261 => "0001111100000010",		--	addl r7,2
		262 => "1010000000000111",		-- getmem r0,r7,0
		263 => "0010111100000010",		-- subl r7,2
		264 => "0000000100000001",		--	set 	r1,1
		265 => "0011000000000001",		--	lsl 	r0,r1
		266 => "0001111100000010",		--	addl r7,2
		267 => "1001111100000000",		-- setmem r7,r0,0
		268 => "0010111100000010",		-- subl r7,2
		269 => "0001101000000001",		--	addl 	r2,1
		270 => "0110100010111011",		--	jmp 	mult8_loop
		271 => "0001111100000000",		--	addl r7,0
		272 => "1010000000000111",		-- getmem r0,r7,0
		273 => "0010111100000000",		-- subl r7,0
		274 => "0001111100000001",		--	addl r7,1
		275 => "1010000100000111",		-- getmem r1,r7,0
		276 => "0010111100000001",		-- subl r7,1
		277 => "0010111000000001",		--	subl r6,1
		278 => "1010001100000110",		-- getmem 	r3,r6,0
		279 => "0010111000000001",		--	subl r6,1
		280 => "1010001000000110",		-- getmem 	r2,r6,0
		281 => "0000111000000111",		--	mov r6,r7
		282 => "0010111000000001",		-- subl r6,1
		283 => "1010011100000110",		-- getmem r7,r6,0
		284 => "0010111000000001",		--	subl r6,1
		285 => "1010010100000110",		-- getmem r5,r6,0
		286 => "0010111000000001",		-- subl r6,1
		287 => "1010010000000110",		-- getmem r4,r6,0
		288 => "1011110000000101",		-- setpc r4,r5


        others => "0000000000000000"
    );
    --signal prog_rom: prog_mem_t := HEXFILE;
begin
    
    uut: processor port map (
        temporary_processor_instr_input => instr_input,
        clk => clk,
        ext_rst => ext_rst,
        pc_out => pc
    );
    
    

    clk_proc: process
    begin
        clk <= '1';
        instr_input <= prog_rom(to_integer(unsigned(pc)));
        wait for 50ns;
        clk <= '0';
        wait for 50ns;
    end process;
    
    main_proc: process
    begin
        --ext_rst <= '0';
        --wait for 360ns;
        --ext_rst <= '1';
        --wait for 20ns;

        --let the program execute        
        wait for 1000000us;
        

    end process;

end Behavioral;
