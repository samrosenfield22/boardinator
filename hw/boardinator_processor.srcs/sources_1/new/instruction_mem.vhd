

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
use IEEE.NUMERIC_STD.ALL;

entity instruction_mem is
    Port ( clk : in STD_LOGIC;
           pc : in STD_LOGIC_VECTOR (9 downto 0);
           instr : out STD_LOGIC_VECTOR (15 downto 0));
end instruction_mem;

architecture Behavioral of instruction_mem is

    type prog_mem_t is array (160 downto 0) of std_logic_vector(15 downto 0);
    signal prog_rom: prog_mem_t :=
    (    
				0 => "0000010000100000",		--	set r4,0x20
		1 => "0000010111111111",		-- set r5,0xFF
		2 => "1010010001000101",		-- setm r4,r5,1,0
		3 => "0000010000100010",		--	set r4,0x22
		4 => "0000010100000001",		-- set r5,0x01
		5 => "1010010001000101",		-- setm r4,r5,1,0
		6 => "0000010000001010",		--	set r4,10
		7 => "0000010110000000",		-- set r5,0x80	
		8 => "1010010001000101",		-- setm r4,r5,1,0	
		9 => "0000000001101000",		--	set r0,0x68	
		10 => "1010011000001000",		-- setm r6,r0,0,1
		11 => "1011010100000000",		-- getpcl r5
		12 => "1011110000000000",		-- getpch r4
		13 => "0001110100001001",		--  addl r5,9
		14 => "1001100000010000",		-- jovf inc_upper_mangled_tempfile4.asm_14
		15 => "0111000000010001",		--  jmp pushret_mangled_tempfile4.asm_14
		16 => "0001110000000001",		-- addl r4,1
		17 => "1010011000001100",		-- setm r6,r4,0,1
		18 => "1010011000001101",		-- setm r6,r5,0,1
		19 => "0111000001010100",		-- jmp send_uart_char
		20 => "0010111000000001",		-- subl r6,1	
		21 => "0000000001100101",		--	set r0,0x65	
		22 => "1010011000001000",		-- setm r6,r0,0,1
		23 => "1011010100000000",		-- getpcl r5
		24 => "1011110000000000",		-- getpch r4
		25 => "0001110100001001",		--  addl r5,9
		26 => "1001100000011100",		-- jovf inc_upper_mangled_tempfile4.asm_15
		27 => "0111000000011101",		--  jmp pushret_mangled_tempfile4.asm_15
		28 => "0001110000000001",		-- addl r4,1
		29 => "1010011000001100",		-- setm r6,r4,0,1
		30 => "1010011000001101",		-- setm r6,r5,0,1
		31 => "0111000001010100",		-- jmp send_uart_char
		32 => "0010111000000001",		-- subl r6,1	
		33 => "0000000001101100",		--	set r0,0x6c	
		34 => "1010011000001000",		-- setm r6,r0,0,1
		35 => "1011010100000000",		-- getpcl r5
		36 => "1011110000000000",		-- getpch r4
		37 => "0001110100001001",		--  addl r5,9
		38 => "1001100000101000",		-- jovf inc_upper_mangled_tempfile4.asm_16
		39 => "0111000000101001",		--  jmp pushret_mangled_tempfile4.asm_16
		40 => "0001110000000001",		-- addl r4,1
		41 => "1010011000001100",		-- setm r6,r4,0,1
		42 => "1010011000001101",		-- setm r6,r5,0,1
		43 => "0111000001010100",		-- jmp send_uart_char
		44 => "0010111000000001",		-- subl r6,1	
		45 => "0000000001101100",		--	set r0,0x6c	
		46 => "1010011000001000",		-- setm r6,r0,0,1
		47 => "1011010100000000",		-- getpcl r5
		48 => "1011110000000000",		-- getpch r4
		49 => "0001110100001001",		--  addl r5,9
		50 => "1001100000110100",		-- jovf inc_upper_mangled_tempfile4.asm_17
		51 => "0111000000110101",		--  jmp pushret_mangled_tempfile4.asm_17
		52 => "0001110000000001",		-- addl r4,1
		53 => "1010011000001100",		-- setm r6,r4,0,1
		54 => "1010011000001101",		-- setm r6,r5,0,1
		55 => "0111000001010100",		-- jmp send_uart_char
		56 => "0010111000000001",		-- subl r6,1	
		57 => "0000000001101111",		--	set r0,0x6f	
		58 => "1010011000001000",		-- setm r6,r0,0,1
		59 => "1011010100000000",		-- getpcl r5
		60 => "1011110000000000",		-- getpch r4
		61 => "0001110100001001",		--  addl r5,9
		62 => "1001100001000000",		-- jovf inc_upper_mangled_tempfile4.asm_18
		63 => "0111000001000001",		--  jmp pushret_mangled_tempfile4.asm_18
		64 => "0001110000000001",		-- addl r4,1
		65 => "1010011000001100",		-- setm r6,r4,0,1
		66 => "1010011000001101",		-- setm r6,r5,0,1
		67 => "0111000001010100",		-- jmp send_uart_char
		68 => "0010111000000001",		-- subl r6,1	
		69 => "0000010000100010",		--	set r4,0x22
		70 => "0000010100000010",		-- set r5,0x02
		71 => "1010010001000101",		-- setm r4,r5,1,0
		72 => "0000000100000100",		--	set 		r1,0x04		
		73 => "0000010000001011",		--	set r4,11
		74 => "1010100001000100",		-- getm r0,r4,1,0
		75 => "0100100000000001",		--	and			r0,r1
		76 => "0110000000000000",		--	cmpl		r0,0
		77 => "0111100001001000",		--	jeq 		wait_for_rx
		78 => "0000010000001101",		--	set r4,13
		79 => "1010100001000100",		-- getm r0,r4,1,0
		80 => "0010100000110000",		--	subl		r0,0x30		
		81 => "0000000100100010",		--	set 		r1,0x22
		82 => "1010000101000000",		--	setm 		r1,r0,1,0
		83 => "0111000001001000",		--	jmp			wait_for_rx
		84 => "0010111000000011",		--	subl		r6,3
		85 => "1010110000000110",		--	getm		r4,r6,0,0
		86 => "0001111000000011",		--	addl		r6,3
		87 => "0000010100001100",		--	set 		r5,12
		88 => "1010010101000100",		--	setm 		r5,r4,1,0
		89 => "0000010000001010",		--	set r4,10
		90 => "0000010110000001",		-- set r5,0x81
		91 => "1010010001000101",		-- setm r4,r5,1,0
		92 => "0000010000001011",		--	set r4,11
		93 => "1010100101000100",		-- getm r1,r4,1,0
		94 => "0000010100000001",		--	set 		r5,1
		95 => "0100100100000101",		--	and 		r1,r5
		96 => "0110000100000001",		--	cmpl		r1,1
		97 => "0111100001011100",		--	jeq 		send_loop
		98 => "0000010000001010",		--	set r4,10
		99 => "0000010110000000",		-- set r5,0x80
		100 => "1010010001000101",		-- setm r4,r5,1,0
		101 => "0010111000000001",		--	subl r6,1
		102 => "1010110100000110",		-- getm r5,r6,0,0
		103 => "0010111000000001",		-- subl r6,1
		104 => "1010110000000110",		-- getm r4,r6,0,0
		105 => "1100010000000101",		-- setpc r4,r5
		106 => "1010011000001000",		--	setm r6,	r0,0,1
		107 => "1010011000001001",		--	setm r6,	r1,0,1
		108 => "0010111000000101",		--	subl		r6,5
		109 => "1010100000000110",		--	getm		r0,r6,0,0
		110 => "0001111000000101",		--	addl		r6,5
		111 => "0000010000000010",		--	set r4,2
		112 => "0000010100000000",		-- set r5,0x00		
		113 => "1010010001000101",		-- setm r4,r5,1,0		
		114 => "0000010000000011",		--	set r4,3
		115 => "0000010111000011",		-- set r5,195
		116 => "1010010001000101",		-- setm r4,r5,1,0
		117 => "0000010000000010",		--	set r4,2
		118 => "0000010110000011",		-- set r5,0x83
		119 => "1010010001000101",		-- setm r4,r5,1,0
		120 => "0000010000000101",		--	set 		r4,5
		121 => "0111000010000101",		--	jmp			delay_ms_cond
		122 => "0000010100000001",		--	set 		r5,1
		123 => "1010100101000100",		--	getm		r1,r4,1,0
		124 => "0100100100000101",		--	and			r1,r5
		125 => "0110000100000001",		--	cmpl 		r1,1
		126 => "1000000001111011",		--	jne			delay_ms_loop
		127 => "1010100101000100",		--	getm		r1,r4,1,0
		128 => "0000010100000001",		--	set 		r5,1
		129 => "0100100100000101",		--	and			r1,r5
		130 => "0110000100000001",		--	cmpl 		r1,1
		131 => "0111100001111111",		--	jeq			delay_ms_wait_til_lo
		132 => "0010100000000001",		--	subl		r0,1
		133 => "0110000000000000",		--	cmpl		r0,0
		134 => "1000000001111011",		--	jne			delay_ms_loop
		135 => "0010111000000001",		--	subl r6,1
		136 => "1010100100000110",		-- getm 		r1,r6,0,0
		137 => "0010111000000001",		--	subl r6,1
		138 => "1010100000000110",		-- getm 		r0,r6,0,0
		139 => "0010111000000001",		--	subl r6,1
		140 => "1010110100000110",		-- getm r5,r6,0,0
		141 => "0010111000000001",		-- subl r6,1
		142 => "1010110000000110",		-- getm r4,r6,0,0
		143 => "1100010000000101",		-- setpc r4,r5

        
        others => "0000000000000000"
    );

begin
    process(clk)
    begin
        if(clk'event and clk='1') then
            instr <= prog_rom(to_integer(unsigned(pc)));
        end if;
    end process;
end Behavioral;
