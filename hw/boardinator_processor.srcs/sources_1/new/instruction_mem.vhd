

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
use IEEE.NUMERIC_STD.ALL;

entity instruction_mem is
    Port ( clk : in STD_LOGIC;
           pc : in STD_LOGIC_VECTOR (9 downto 0);
           instr : out STD_LOGIC_VECTOR (15 downto 0));
end instruction_mem;

architecture Behavioral of instruction_mem is

    type prog_mem_t is array (490 downto 0) of std_logic_vector(15 downto 0);
    signal prog_rom: prog_mem_t :=
    (    
				0 => "0000010000100000",		--	set r4,0x20
		1 => "0000010111111111",		-- set r5,0xFF
		2 => "1010010001000101",		-- setm r4,r5,1,0
		3 => "0000010000100011",		--	set r4,0x23
		4 => "0000010100000000",		-- set r5,0x00
		5 => "1010010001000101",		-- setm r4,r5,1,0
		6 => "0000010000100010",		--	set r4,0x22
		7 => "0000010100000000",		-- set r5,0x00
		8 => "1010010001000101",		-- setm r4,r5,1,0
		9 => "0000010000001010",		--	set r4,10
		10 => "0000010110000000",		-- set r5,0x80	
		11 => "1010010001000101",		-- setm r4,r5,1,0	
		12 => "0000001100000000",		--	set		r3,0x00		
		13 => "0000010000100100",		--	set r4,0x24
		14 => "1010100001000100",		-- getm r0,r4,1,0
		15 => "0110100000000000",		--	not		r0
		16 => "0000001000000011",		--	set		r2,0x03
		17 => "0100100000000010",		--	and		r0,r2
		18 => "0110000000000000",		--	cmpl r0,0
		19 => "0111100000011011",		--	jeq case_a
		20 => "0110000000000001",		--	cmpl r0,1
		21 => "0111100000011101",		--	jeq case_b
		22 => "0110000000000010",		--	cmpl r0,2
		23 => "0111100000011111",		--	jeq case_c
		24 => "0110000000000011",		--	cmpl r0,3
		25 => "0111100000100001",		--	jeq case_d
		26 => "0111000000100011",		--	jmp switch_end
		27 => "0000000011111010",		--	set		r0,250
		28 => "0111000000100011",		--	jmp switch_end
		29 => "0000000010010110",		--	set		r0,150
		30 => "0111000000100011",		--	jmp switch_end
		31 => "0000000001001011",		--	set		r0,75
		32 => "0111000000100011",		--	jmp switch_end
		33 => "0000000000101000",		--	set		r0,40
		34 => "0111000000100011",		--	jmp switch_end
		35 => "0000001000100010",		--	set			r2,0x22
		36 => "1010001001000011",		--	setm		r2,r3,1,0
		37 => "1010011000001000",		--	setm r6,	r0,0,1
		38 => "1011010100000000",		--	getpcl r5
		39 => "1011110000000000",		-- getpch r4
		40 => "0001110100001001",		--  addl r5,9
		41 => "1001100000101011",		-- jovf inc_upper_mangled_tempfile3.asm_58
		42 => "0111000000101100",		--  jmp pushret_mangled_tempfile3.asm_58
		43 => "0001110000000001",		-- addl r4,1
		44 => "1010011000001100",		-- setm r6,r4,0,1
		45 => "1010011000001101",		-- setm r6,r5,0,1
		46 => "0111000011101101",		-- jmp 	delay_ms
		47 => "0010111000000001",		--	subl		r6,1
		48 => "0000001000000001",		--	set			r2,0x01
		49 => "0100001100000010",		--	xor			r3,r2
		50 => "0000010000001011",		--	set r4,11
		51 => "1010100001000100",		-- getm r0,r4,1,0
		52 => "0000001000000100",		--	set		r2,0x04
		53 => "0100100000000010",		--	and		r0,r2
		54 => "0110000000000000",		--	cmpl		r0,0
		55 => "0111100000001101",		--	jeq		main_loop
		56 => "0000010000001101",		--	set r4,13
		57 => "1010100001000100",		-- getm r0,r4,1,0
		58 => "1010011000001000",		--	setm r6,	r0,0,1
		59 => "1011010100000000",		--	getpcl r5
		60 => "1011110000000000",		-- getpch r4
		61 => "0001110100001001",		--  addl r5,9
		62 => "1001100001000000",		-- jovf inc_upper_mangled_tempfile3.asm_75
		63 => "0111000001000001",		--  jmp pushret_mangled_tempfile3.asm_75
		64 => "0001110000000001",		-- addl r4,1
		65 => "1010011000001100",		-- setm r6,r4,0,1
		66 => "1010011000001101",		-- setm r6,r5,0,1
		67 => "0111000100010011",		-- jmp 	send_uart_char
		68 => "0010111000000001",		--	subl		r6,1
		69 => "0010100000110000",		--	subl		r0,0x30
		70 => "1010011000001000",		--	setm r6,	r0,0,1
		71 => "1011010100000000",		--	getpcl r5
		72 => "1011110000000000",		-- getpch r4
		73 => "0001110100001001",		--  addl r5,9
		74 => "1001100001001100",		-- jovf inc_upper_mangled_tempfile3.asm_81
		75 => "0111000001001101",		--  jmp pushret_mangled_tempfile3.asm_81
		76 => "0001110000000001",		-- addl r4,1
		77 => "1010011000001100",		-- setm r6,r4,0,1
		78 => "1010011000001101",		-- setm r6,r5,0,1
		79 => "0111000011001010",		-- jmp 	factorial
		80 => "0010111000000001",		--	subl		r6,1
		81 => "0000001000001010",		--	set		r2,10
		82 => "1010011000001010",		--	setm r6,	r2,0,1
		83 => "1010011000001000",		--	setm r6,	r0,0,1
		84 => "1011010100000000",		--	getpcl r5
		85 => "1011110000000000",		-- getpch r4
		86 => "0001110100001001",		--  addl r5,9
		87 => "1001100001011001",		-- jovf inc_upper_mangled_tempfile3.asm_109
		88 => "0111000001011010",		--  jmp pushret_mangled_tempfile3.asm_109
		89 => "0001110000000001",		-- addl r4,1
		90 => "1010011000001100",		-- setm r6,r4,0,1
		91 => "1010011000001101",		-- setm r6,r5,0,1
		92 => "0111000100101001",		-- jmp 	uart_print_u8
		93 => "0010111000000010",		--	subl		r6,2
		94 => "0000001000001010",		--	set		r2,0x0A		
		95 => "1010011000001010",		--	setm r6,	r2,0,1
		96 => "1011010100000000",		--	getpcl r5
		97 => "1011110000000000",		-- getpch r4
		98 => "0001110100001001",		--  addl r5,9
		99 => "1001100001100101",		-- jovf inc_upper_mangled_tempfile3.asm_113
		100 => "0111000001100110",		--  jmp pushret_mangled_tempfile3.asm_113
		101 => "0001110000000001",		-- addl r4,1
		102 => "1010011000001100",		-- setm r6,r4,0,1
		103 => "1010011000001101",		-- setm r6,r5,0,1
		104 => "0111000100010011",		-- jmp 	send_uart_char
		105 => "0010111000000001",		--	subl		r6,1
		106 => "0111000000001101",		--	jmp		main_loop
		107 => "0010111000000011",		--	subl r6,3
		108 => "1010100000000110",		--	getm r0,r6,0,0 
		109 => "0010111000000001",		--	subl r6,1
		110 => "1010100100000110",		--	getm r1,r6,0,0 
		111 => "0010111000000001",		--	subl r6,1
		112 => "1010110100000110",		--	getm r5,r6,0,0 
		113 => "0010111000000001",		--	subl r6,1
		114 => "1010110000000110",		--	getm r4,r6,0,0 
		115 => "0001111000000110",		--	addl r6,6
		116 => "0000001000000000",		--	set r2,0
		117 => "0001000100000100",		--	add r1,r4
		118 => "1001100001111000",		--	jovf add16_lo_ovflw
		119 => "0111000001111100",		--	jmp add16_add_hi_bytes
		120 => "0001100000000001",		--	addl r0,1
		121 => "1001100001111011",		--	jovf add16_hi_ovflw_1
		122 => "0111000001111100",		--	jmp add16_add_hi_bytes
		123 => "0000001000000001",		--	set r2,1
		124 => "0001000000000101",		--	add r0,r5
		125 => "1001100001111111",		--	jovf add16_hi_ovflw_2
		126 => "0111000010000000",		--	jmp add16_exit
		127 => "0000001000000001",		--	set r2,1
		128 => "0010111000000001",		--	subl r6,1
		129 => "1010110100000110",		-- getm r5,r6,0,0
		130 => "0010111000000001",		-- subl r6,1
		131 => "1010110000000110",		-- getm r4,r6,0,0
		132 => "1100010000000101",		-- setpc r4,r5
		133 => "1010011000001010",		--	setm r6,r2,0,1
		134 => "0010111000000100",		--	subl r6,4
		135 => "1010100000000110",		--	getm r0,r6,0,0 
		136 => "0010111000000001",		--	subl r6,1
		137 => "1010100100000110",		--	getm r1,r6,0,0 
		138 => "0010111000000001",		--	subl r6,1
		139 => "1010101000000110",		--	getm r2,r6,0,0 
		140 => "0001111000000110",		--	addl r6,6
		141 => "0110001000001000",		--	cmpl 	r2,8
		142 => "1001000010010011",		--	jlt		lsl16_shift_less_than_half
		143 => "0000100000000001",		--	mov 	r0,r1
		144 => "0000000100000000",		--	set 	r1,0
		145 => "0011000000000010",		--	lsl 	r0,r2
		146 => "0111000010011010",		--	jmp 	lsl16_exit
		147 => "0011000000000010",		--	lsl 	r0,r2	
		148 => "0000010100001000",		--	set 	r5,8
		149 => "0010010100000010",		--	sub 	r5,r2	
		150 => "0000110000000001",		--	mov 	r4,r1
		151 => "0011110000000101",		--	lsr 	r4,r5	
		152 => "0101000000000100",		--	or 		r0,r4
		153 => "0011000100000010",		--	lsl 	r1,r2
		154 => "0010111000000001",		--	subl r6,1
		155 => "1010101000000110",		-- getm 	r2,r6,0,0
		156 => "0010111000000001",		--	subl r6,1
		157 => "1010110100000110",		-- getm r5,r6,0,0
		158 => "0010111000000001",		-- subl r6,1
		159 => "1010110000000110",		-- getm r4,r6,0,0
		160 => "1100010000000101",		-- setpc r4,r5
		161 => "0010111000000011",		--	subl	r6,3
		162 => "1010110000000110",		--	getm	r4,r6,0,0
		163 => "0010111000000001",		--	subl	r6,1
		164 => "1010110100000110",		--	getm	r5,r6,0,0
		165 => "0001111000000100",		--	addl	r6,4
		166 => "0000000000000000",		--	set 	r0,0
		167 => "0111000010101010",		--	jmp		mult_loop_cond
		168 => "0001000000000100",		--	add 	r0,r4
		169 => "0010110100000001",		--	subl	r5,1
		170 => "0110010100000000",		--	cmpl	r5,0
		171 => "1000000010101000",		--	jne		mult_loop
		172 => "0010111000000001",		--	subl r6,1
		173 => "1010110100000110",		-- getm r5,r6,0,0
		174 => "0010111000000001",		-- subl r6,1
		175 => "1010110000000110",		-- getm r4,r6,0,0
		176 => "1100010000000101",		-- setpc r4,r5
		177 => "1010011000001010",		--	setm r6,r2,0,1
		178 => "0010111000000100",		--	subl	r6,4
		179 => "1010100100000110",		--	getm	r1,r6,0,0
		180 => "0010111000000001",		--	subl	r6,1
		181 => "1010101000000110",		--	getm	r2,r6,0,0
		182 => "0001111000000101",		--	addl	r6,5
		183 => "0110001000000000",		--	cmpl	r2,0
		184 => "1000000010111100",		--	jne	div8_legal
		185 => "0000010000000000",		--	set r4,0
		186 => "0000010110000000",		-- set r5,0x80	
		187 => "1010010001000101",		-- setm r4,r5,1,0	
		188 => "0000000000000000",		--	set		r0,0
		189 => "0111000011000000",		--	jmp		div8_cond
		190 => "0001100000000001",		--	addl	r0,1
		191 => "0010000100000010",		--	sub		r1,r2
		192 => "0101101000000001",		--	cmp 	r2,r1
		193 => "1001000010111110",		--	jlt		div8_loop
		194 => "0111100010111110",		--	jeq		div8_loop
		195 => "0010111000000001",		--	subl r6,1
		196 => "1010101000000110",		-- getm r2,r6,0,0
		197 => "0010111000000001",		--	subl r6,1
		198 => "1010110100000110",		-- getm r5,r6,0,0
		199 => "0010111000000001",		-- subl r6,1
		200 => "1010110000000110",		-- getm r4,r6,0,0
		201 => "1100010000000101",		-- setpc r4,r5
		202 => "1010011000001111",		--	setm r6,r7,0,1
		203 => "0000111100000110",		-- mov r7,r6
		204 => "1010011000001010",		--	setm r6,r2,0,1
		205 => "0010111100000000",		--	subl r7,0
		206 => "0010111100000100",		-- subl r7,4
		207 => "1010100000000111",		-- getm 	r0,r7,0,0
		208 => "0001111100000100",		-- addl r7,4
		209 => "0001111100000000",		-- addl r7,0
		210 => "0000101000000000",		--	mov 	r2,r0
		211 => "0111000011100000",		--	jmp		factorial_loop_cond
		212 => "1010011000001000",		--	setm r6,r0,0,1
		213 => "1010011000001010",		--	setm r6,r2,0,1
		214 => "1011010100000000",		--	getpcl r5
		215 => "1011110000000000",		-- getpch r4
		216 => "0001110100001001",		--  addl r5,9
		217 => "1001100011011011",		-- jovf inc_upper_mangled_tempfile3.asm_286
		218 => "0111000011011100",		--  jmp pushret_mangled_tempfile3.asm_286
		219 => "0001110000000001",		-- addl r4,1
		220 => "1010011000001100",		-- setm r6,r4,0,1
		221 => "1010011000001101",		-- setm r6,r5,0,1
		222 => "0111000010100001",		-- jmp mult8
		223 => "0010111000000010",		--	subl	r6,2
		224 => "0010101000000001",		--	subl	r2,1
		225 => "0110001000000001",		--	cmpl	r2,1
		226 => "1000100011010100",		--	jgt		factorial_loop
		227 => "0010111000000001",		--	subl r6,1
		228 => "1010101000000110",		-- getm 	r2,r6,0,0
		229 => "0000111000000111",		--	mov r6,r7
		230 => "0010111000000001",		-- subl r6,1
		231 => "1010111100000110",		-- getm r7,r6,0,0
		232 => "0010111000000001",		--	subl r6,1
		233 => "1010110100000110",		-- getm r5,r6,0,0
		234 => "0010111000000001",		-- subl r6,1
		235 => "1010110000000110",		-- getm r4,r6,0,0
		236 => "1100010000000101",		-- setpc r4,r5
		237 => "1010011000001000",		--	setm r6,	r0,0,1
		238 => "1010011000001001",		--	setm r6,	r1,0,1
		239 => "0010111000000101",		--	subl		r6,5
		240 => "1010100000000110",		--	getm		r0,r6,0,0
		241 => "0001111000000101",		--	addl		r6,5
		242 => "0000010000000010",		--	set r4,2
		243 => "0000010100000000",		-- set r5,0x00		
		244 => "1010010001000101",		-- setm r4,r5,1,0		
		245 => "0000010000000011",		--	set r4,3
		246 => "0000010111000011",		-- set r5,195
		247 => "1010010001000101",		-- setm r4,r5,1,0
		248 => "0000010000000010",		--	set r4,2
		249 => "0000010110000011",		-- set r5,0x83
		250 => "1010010001000101",		-- setm r4,r5,1,0
		251 => "0000010000000101",		--	set 		r4,5
		252 => "0000010100000001",		--	set 		r5,1
		253 => "0111000100001000",		--	jmp			delay_ms_cond
		254 => "1010100101000100",		--	getm		r1,r4,1,0
		255 => "0100100100000101",		--	and			r1,r5
		256 => "0110000100000001",		--	cmpl 		r1,1
		257 => "1000000011111110",		--	jne			delay_ms_loop
		258 => "1010100101000100",		--	getm		r1,r4,1,0
		259 => "0000010100000001",		--	set 		r5,1
		260 => "0100100100000101",		--	and			r1,r5
		261 => "0110000100000001",		--	cmpl 		r1,1
		262 => "0111100100000010",		--	jeq			delay_ms_wait_til_lo
		263 => "0010100000000001",		--	subl		r0,1
		264 => "0110000000000000",		--	cmpl		r0,0
		265 => "1000000011111110",		--	jne			delay_ms_loop
		266 => "0010111000000001",		--	subl r6,1
		267 => "1010100100000110",		-- getm 		r1,r6,0,0
		268 => "0010111000000001",		--	subl r6,1
		269 => "1010100000000110",		-- getm 		r0,r6,0,0
		270 => "0010111000000001",		--	subl r6,1
		271 => "1010110100000110",		-- getm r5,r6,0,0
		272 => "0010111000000001",		-- subl r6,1
		273 => "1010110000000110",		-- getm r4,r6,0,0
		274 => "1100010000000101",		-- setpc r4,r5
		275 => "0010111000000011",		--	subl		r6,3
		276 => "1010110000000110",		--	getm		r4,r6,0,0
		277 => "0001111000000011",		--	addl		r6,3
		278 => "0000010100001100",		--	set 		r5,12
		279 => "1010010101000100",		--	setm 		r5,r4,1,0
		280 => "0000010000001010",		--	set r4,10
		281 => "0000010110000001",		-- set r5,0x81
		282 => "1010010001000101",		-- setm r4,r5,1,0
		283 => "0000010000001011",		--	set r4,11
		284 => "1010100101000100",		-- getm r1,r4,1,0
		285 => "0000010100000001",		--	set 		r5,1
		286 => "0100100100000101",		--	and 		r1,r5
		287 => "0110000100000001",		--	cmpl		r1,1
		288 => "0111100100011011",		--	jeq 		send_loop
		289 => "0000010000001010",		--	set r4,10
		290 => "0000010110000000",		-- set r5,0x80
		291 => "1010010001000101",		-- setm r4,r5,1,0
		292 => "0010111000000001",		--	subl r6,1
		293 => "1010110100000110",		-- getm r5,r6,0,0
		294 => "0010111000000001",		-- subl r6,1
		295 => "1010110000000110",		-- getm r4,r6,0,0
		296 => "1100010000000101",		-- setpc r4,r5
		297 => "1010011000001111",		--	setm r6,r7,0,1
		298 => "0000111100000110",		-- mov r7,r6
		299 => "1010011000001010",		--	setm r6,r2,0,1
		300 => "1010011000001011",		--	setm r6,r3,0,1
		301 => "0000001100000000",		--	set 	r3,0	
		302 => "0010111100000100",		--	subl	r7,4
		303 => "1010100000000111",		--	getm	r0,r7,0,0
		304 => "0010111100000001",		--	subl	r7,1
		305 => "1010101000000111",		--	getm	r2,r7,0,0
		306 => "0001111100000101",		--	addl	r7,5
		307 => "1010011000001010",		--	setm r6,r2,0,1
		308 => "1010011000001000",		--	setm r6,r0,0,1
		309 => "1011010100000000",		--	getpcl r5
		310 => "1011110000000000",		-- getpch r4
		311 => "0001110100001001",		--  addl r5,9
		312 => "1001100100111010",		-- jovf inc_upper_mangled_tempfile3.asm_57
		313 => "0111000100111011",		--  jmp pushret_mangled_tempfile3.asm_57
		314 => "0001110000000001",		-- addl r4,1
		315 => "1010011000001100",		-- setm r6,r4,0,1
		316 => "1010011000001101",		-- setm r6,r5,0,1
		317 => "0111000010110001",		-- jmp div8
		318 => "0010111000000010",		--	subl	r6,2
		319 => "0110000100001010",		--	cmpl	r1,10
		320 => "1001000101000011",		--	jlt		uart_print_u8_numeric_char
		321 => "0001100100110111",		--	addl	r1,0x37		
		322 => "0111000101000100",		--	jmp		uart_print_u8_char_converted
		323 => "0001100100110000",		--	addl	r1,0x30		
		324 => "1010011000001001",		--	setm r6,r1,0,1
		325 => "0001101100000001",		--	addl	r3,1
		326 => "0110000000000000",		--	cmpl	r0,0
		327 => "1000000100110011",		--	jne	uart_print_u8_loop
		328 => "0111000101010100",		--	jmp		uart_print_u8_rev_cond
		329 => "1011010100000000",		--	getpcl r5
		330 => "1011110000000000",		-- getpch r4
		331 => "0001110100001001",		--  addl r5,9
		332 => "1001100101001110",		-- jovf inc_upper_mangled_tempfile3.asm_84
		333 => "0111000101001111",		--  jmp pushret_mangled_tempfile3.asm_84
		334 => "0001110000000001",		-- addl r4,1
		335 => "1010011000001100",		-- setm r6,r4,0,1
		336 => "1010011000001101",		-- setm r6,r5,0,1
		337 => "0111000100010011",		-- jmp send_uart_char
		338 => "0010111000000001",		--	subl	r6,1
		339 => "0010101100000001",		--	subl	r3,1
		340 => "0110001100000000",		--	cmpl	r3,0
		341 => "1000000101001001",		--	jne		uart_print_u8_rev_loop	
		342 => "0010111000000001",		--	subl r6,1
		343 => "1010101100000110",		-- getm 	r3,r6,0,0
		344 => "0010111000000001",		--	subl r6,1
		345 => "1010101000000110",		-- getm 	r2,r6,0,0
		346 => "0000111000000111",		--	mov r6,r7
		347 => "0010111000000001",		-- subl r6,1
		348 => "1010111100000110",		-- getm r7,r6,0,0
		349 => "0010111000000001",		--	subl r6,1
		350 => "1010110100000110",		-- getm r5,r6,0,0
		351 => "0010111000000001",		-- subl r6,1
		352 => "1010110000000110",		-- getm r4,r6,0,0
		353 => "1100010000000101",		-- setpc r4,r5

        
        others => "0000000000000000"
    );

begin
    process(clk)
    begin
        if(clk'event and clk='1') then
            instr <= prog_rom(to_integer(unsigned(pc)));
        end if;
    end process;
end Behavioral;
