

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
use IEEE.NUMERIC_STD.ALL;

entity instruction_mem is
    Port ( clk : in STD_LOGIC;
           pc : in STD_LOGIC_VECTOR (9 downto 0);
           instr : out STD_LOGIC_VECTOR (15 downto 0));
end instruction_mem;

architecture Behavioral of instruction_mem is

    type prog_mem_t is array (490 downto 0) of std_logic_vector(15 downto 0);
    signal prog_rom: prog_mem_t :=
    (    
				0 => "0000000010101011",		--	set		r0,171
		1 => "0000000100010111",		--	set		r1,23
		2 => "1010011000000001",		--	setm	r6,r1,0,0
		3 => "0001111000000001",		--	addl	r6,1
		4 => "1010011000000000",		--	setm	r6,r0,0,0
		5 => "0001111000000001",		--	addl	r6,1
		6 => "1011010100000000",		--	getpcl r5
		7 => "1011110000000000",		-- getpch r4
		8 => "0001110100001001",		--  addl r5,9
		9 => "1001100000001011",		-- jovf inc_upper_mangled_tempfile3.asm_20
		10 => "0111000000001100",		--  jmp pushret_mangled_tempfile3.asm_20
		11 => "0001110000000001",		-- addl r4,1
		12 => "1010011000001100",		-- setm r6,r4,0,1
		13 => "1010011000001101",		-- setm r6,r5,0,1
		14 => "0111000010101101",		-- jmp div8
		15 => "0010111000000010",		--	subl	r6,2
		16 => "0111000000010000",		--	jmp		end
		17 => "0010111000000011",		--	subl r6,3
		18 => "1010100000000110",		--	getm r0,r6,0,0 
		19 => "0010111000000001",		--	subl r6,1
		20 => "1010100100000110",		--	getm r1,r6,0,0 
		21 => "0010111000000001",		--	subl r6,1
		22 => "1010110100000110",		--	getm r5,r6,0,0 
		23 => "0010111000000001",		--	subl r6,1
		24 => "1010110000000110",		--	getm r4,r6,0,0 
		25 => "0001111000000110",		--	addl r6,6
		26 => "0000001000000000",		--	set r2,0
		27 => "0001000100000100",		--	add r1,r4
		28 => "1001100000011110",		--	jovf add16_lo_ovflw
		29 => "0111000000100010",		--	jmp add16_add_hi_bytes
		30 => "0001100000000001",		--	addl r0,1
		31 => "1001100000100001",		--	jovf add16_hi_ovflw_1
		32 => "0111000000100010",		--	jmp add16_add_hi_bytes
		33 => "0000001000000001",		--	set r2,1
		34 => "0001000000000101",		--	add r0,r5
		35 => "1001100000100101",		--	jovf add16_hi_ovflw_2
		36 => "0111000000100110",		--	jmp add16_exit
		37 => "0000001000000001",		--	set r2,1
		38 => "0010111000000001",		--	subl r6,1
		39 => "1010110100000110",		-- getm r5,r6,0,0
		40 => "0010111000000001",		-- subl r6,1
		41 => "1010110000000110",		-- getm r4,r6,0,0
		42 => "1100010000000101",		-- setpc r4,r5
		43 => "0010111000000011",		--	subl r6,3
		44 => "1010100000000110",		--	getm r0,r6,0,0 
		45 => "0010111000000001",		--	subl r6,1
		46 => "1010100100000110",		--	getm r1,r6,0,0 
		47 => "0010111000000001",		--	subl r6,1
		48 => "1010101000000110",		--	getm r2,r6,0,0 
		49 => "0001111000000101",		--	addl r6,5
		50 => "0110001000001000",		--	cmpl 	r2,8
		51 => "1001000000111000",		--	jlt		lsl16_shift_less_than_half
		52 => "0000100000000001",		--	mov 	r0,r1
		53 => "0000000100000000",		--	set 	r1,0
		54 => "0011000000000010",		--	lsl 	r0,r2
		55 => "0111000000111110",		--	jmp 	lsl16_exit
		56 => "0011000000000010",		--	lsl 	r0,r2	
		57 => "0010010100000010",		--	sub 	r5,r2	
		58 => "0000110000000001",		--	mov 	r4,r1
		59 => "0011110000000101",		--	lsr 	r4,r5	
		60 => "0101000000000100",		--	or 		r0,r4
		61 => "0011000100000010",		--	lsl 	r1,r2
		62 => "0010111000000001",		--	subl r6,1
		63 => "1010110100000110",		-- getm r5,r6,0,0
		64 => "0010111000000001",		-- subl r6,1
		65 => "1010110000000110",		-- getm r4,r6,0,0
		66 => "1100010000000101",		-- setpc r4,r5
		67 => "1010011000001111",		--	setm r6,r7,0,1
		68 => "0000111100000110",		-- mov r7,r6
		69 => "0001111000000011",		--	addl r6,	3
		70 => "1010011000001010",		--	setm r6,	r2,0,1
		71 => "1010011000001011",		--	setm r6,	r3,0,1
		72 => "0000001000000000",		--	set 	r2,0	
		73 => "0000000000000000",		--	set 	r0,0
		74 => "0001111100000000",		--	addl r7,0
		75 => "1010011100000000",		-- setm r7,r0	,0,0
		76 => "0010111100000000",		-- subl r7,0	
		77 => "0001111100000001",		--	addl r7,1
		78 => "1010011100000000",		-- setm r7,r0	,0,0
		79 => "0010111100000001",		-- subl r7,1	
		80 => "0000000000000001",		--	set 	r0,1
		81 => "0001111100000010",		--	addl r7,2
		82 => "1010011100000000",		-- setm r7,r0	,0,0
		83 => "0010111100000010",		-- subl r7,2	
		84 => "0110001000000111",		--	cmpl	r2,7
		85 => "1000100010011011",		--	jgt 	mult8_exit
		86 => "0010111100000001",		--	subl r7,1	
		87 => "0010111100000100",		-- subl r7,4
		88 => "1010100100000111",		-- getm r1,r7,0,0
		89 => "0001111100000100",		-- addl r7,4
		90 => "0001111100000001",		-- addl r7,1		
		91 => "0001111100000010",		--	addl r7,2	
		92 => "1010101100000111",		-- getm r3,r7,0,0
		93 => "0010111100000010",		-- subl r7,2		
		94 => "0100100100000011",		--	and 	r1,r3
		95 => "0110000100000000",		--	cmpl	r1,0
		96 => "1000000001100010",		--	jne		mult8_shift_and_add
		97 => "0111000010010001",		--	jmp		mult8_loop_end
		98 => "0000000000000000",		--	set 	r0,0
		99 => "0010111100000000",		--	subl r7,0	
		100 => "0010111100000100",		-- subl r7,4
		101 => "1010100100000111",		-- getm r1,r7,0,0
		102 => "0001111100000100",		-- addl r7,4
		103 => "0001111100000000",		-- addl r7,0		
		104 => "1010011000001010",		--	setm r6,r2		,0,1		
		105 => "1010011000001001",		--	setm r6,r1,0,1
		106 => "1010011000001000",		--	setm r6,r0,0,1
		107 => "1011010100000000",		--	getpcl r5
		108 => "1011110000000000",		-- getpch r4
		109 => "0001110100001001",		--  addl r5,9
		110 => "1001100001110000",		-- jovf inc_upper_mangled_tempfile3.asm_168
		111 => "0111000001110001",		--  jmp pushret_mangled_tempfile3.asm_168
		112 => "0001110000000001",		-- addl r4,1
		113 => "1010011000001100",		-- setm r6,r4,0,1
		114 => "1010011000001101",		-- setm r6,r5,0,1
		115 => "0111000000101011",		-- jmp lsl16
		116 => "0010111000000011",		--	subl	r6,3
		117 => "0001111100000000",		--	addl r7,0	
		118 => "1010101100000111",		-- getm r3,r7,0,0
		119 => "0010111100000000",		-- subl r7,0		
		120 => "0001111100000001",		--	addl r7,1
		121 => "1010110000000111",		-- getm r4,r7,0,0
		122 => "0010111100000001",		-- subl r7,1
		123 => "1010011000001100",		--	setm r6,r4,0,1
		124 => "1010011000001011",		--	setm r6,r3,0,1
		125 => "1010011000001001",		--	setm r6,r1,0,1
		126 => "1010011000001000",		--	setm r6,r0,0,1
		127 => "0000101100000010",		--	mov		r3,r2	
		128 => "1011010100000000",		--	getpcl r5
		129 => "1011110000000000",		-- getpch r4
		130 => "0001110100001001",		--  addl r5,9
		131 => "1001100010000101",		-- jovf inc_upper_mangled_tempfile3.asm_179
		132 => "0111000010000110",		--  jmp pushret_mangled_tempfile3.asm_179
		133 => "0001110000000001",		-- addl r4,1
		134 => "1010011000001100",		-- setm r6,r4,0,1
		135 => "1010011000001101",		-- setm r6,r5,0,1
		136 => "0111000000010001",		-- jmp add16
		137 => "0010111000000100",		--	subl	r6,4
		138 => "0001111100000000",		--	addl r7,0
		139 => "1010011100000000",		-- setm r7,r0,0,0
		140 => "0010111100000000",		-- subl r7,0
		141 => "0001111100000001",		--	addl r7,1
		142 => "1010011100000001",		-- setm r7,r1,0,0
		143 => "0010111100000001",		-- subl r7,1
		144 => "0000101000000011",		--	mov		r2,r3
		145 => "0001111100000010",		--	addl r7,2
		146 => "1010100000000111",		-- getm r0,r7,0,0
		147 => "0010111100000010",		-- subl r7,2
		148 => "0000000100000001",		--	set 	r1,1
		149 => "0011000000000001",		--	lsl 	r0,r1
		150 => "0001111100000010",		--	addl r7,2
		151 => "1010011100000000",		-- setm r7,r0,0,0
		152 => "0010111100000010",		-- subl r7,2
		153 => "0001101000000001",		--	addl 	r2,1
		154 => "0111000001010100",		--	jmp 	mult8_loop
		155 => "0001111100000000",		--	addl r7,0
		156 => "1010100000000111",		-- getm r0,r7,0,0
		157 => "0010111100000000",		-- subl r7,0
		158 => "0001111100000001",		--	addl r7,1
		159 => "1010100100000111",		-- getm r1,r7,0,0
		160 => "0010111100000001",		-- subl r7,1
		161 => "0010111000000001",		--	subl r6,1
		162 => "1010101100000110",		-- getm 	r3,r6,0,0
		163 => "0010111000000001",		--	subl r6,1
		164 => "1010101000000110",		-- getm 	r2,r6,0,0
		165 => "0000111000000111",		--	mov r6,r7
		166 => "0010111000000001",		-- subl r6,1
		167 => "1010111100000110",		-- getm r7,r6,0,0
		168 => "0010111000000001",		--	subl r6,1
		169 => "1010110100000110",		-- getm r5,r6,0,0
		170 => "0010111000000001",		-- subl r6,1
		171 => "1010110000000110",		-- getm r4,r6,0,0
		172 => "1100010000000101",		-- setpc r4,r5
		173 => "1010011000001010",		--	setm r6,r2,0,1
		174 => "0010111000000100",		--	subl	r6,4
		175 => "1010100100000110",		--	getm	r1,r6,0,0
		176 => "0010111000000001",		--	subl	r6,1
		177 => "1010101000000110",		--	getm	r2,r6,0,0
		178 => "0001111000000101",		--	addl	r6,5
		179 => "0110001000000000",		--	cmpl	r2,0
		180 => "1000000010111000",		--	jne	div8_legal
		181 => "0000010000000000",		--	set r4,0
		182 => "0000010110000000",		-- set r5,0x80	
		183 => "1010010001000101",		-- setm r4,r5,1,0	
		184 => "0000000000000000",		--	set	r0,0
		185 => "0111000010111100",		--	jmp	div8_cond
		186 => "0001100000000001",		--	addl	r0,1
		187 => "0010000100000010",		--	sub	r1,r2
		188 => "0101101000000001",		--	cmp	r2,r1
		189 => "1001000010111010",		--	jlt	div8_loop
		190 => "0010111000000001",		--	subl r6,1
		191 => "1010101000000110",		-- getm r2,r6,0,0
		192 => "0010111000000001",		--	subl r6,1
		193 => "1010110100000110",		-- getm r5,r6,0,0
		194 => "0010111000000001",		-- subl r6,1
		195 => "1010110000000110",		-- getm r4,r6,0,0
		196 => "1100010000000101",		-- setpc r4,r5

        
        others => "0000000000000000"
    );

begin
    process(clk)
    begin
        if(clk'event and clk='1') then
            instr <= prog_rom(to_integer(unsigned(pc)));
        end if;
    end process;
end Behavioral;
